---
title: Chl-a autocorrelations in Lake Michigan
format:
  html:
    code-fold: true
    toc: true
    toc-depth: 1
    scrollable: true
    theme: sky
execute:
  cache: true
  echo: true
  warning: false
  error: false
execute-dir: project
---

```{r setup}
#| output: false
#| echo: false

# following https://cran.r-project.org/web/packages/gstat/vignettes/st.pdf
library(tidyverse)
library(spacetime)
library(lattice)
ggplot2::theme_set(theme_minimal(base_size= 16))
df <- readRDS("../fullData.Rds") %>% 
  filter(
    Longitude > -88,
    Longitude < -85,
    Latitude > 41.5,
    Latitude < 46,
    sampleDepth <= 5.1,
    CodeName == "Chla",
    !is.na(RESULT),
    )  %>%
  mutate(RESULT = log10(RESULT))

# 4326 specifies WGS84 lat/lon coordinates
df_sf <- df %>% sf::st_as_sf(coords = c("Longitude", "Latitude"), crs=  4326)
# crsuggest::suggest_crs(df_sf, type = "projected", units = "m")
# this was suggested by Jon to cover the full great lakes making it easier to generalize
df_sf_proj <- sf::st_transform(df_sf, crs = "EPSG:3174")


test <- as.data.frame(df_sf_proj$geometry) %>%
  mutate(
    geometry = str_remove(geometry, "POINT \\("),
    geometry = str_remove(geometry, "c\\("),
    geometry = str_remove(geometry, "\\)"),
    ) %>%
  separate(geometry, into = c("x", "y"), sep = ", ") %>%
  mutate(across(everything(), function(z) as.numeric(z) / 1000))
# x and y are in km
df$x <- test$x
df$y <- test$y
basis <- c("Exp", "Sph", "Log")
```


# Spatial dependence
::::{.columns}
:::{.column width="50%"}
![Semivarigram calculates the pairwise variance and plots half that vs the distance.](https://gisgeography.com/wp-content/uploads/2016/10/semi-variogram-point-2.png)
:::

:::{.column width="50%"}
![Between all pairwise locations.](https://gisgeography.com/wp-content/uploads/2016/10/semi-variogram-all-locations.png)
:::
::::

## Modeling spatial dependence
- [Fit semivariogram to model](https://www.sciencedirect.com/science/article/pii/S0098300404000676) (GLS)
  - We considered Exp, Sph, and Log
- [Range](https://csegrecorder.com/assets/images/articles/2022-03-variogram-basics-fig32.jpg) - sets bound on which points are "same"

## Modeling spatial dependence 
```{r}
p <- gstat::show.vgms()
update(p, panel = function(x, y, ...) {
  panel.xyplot(x, y, ...)  # Default scatter plot
  panel.abline(h = 1, col = "red")  # Add a horizontal line at y = 0
  panel.abline(v = 1, col = "blue") # Add a vertical line at x = 0
  panel.text(x = 2.5, y = 1.25, labels = "sill", cex = 1)
  panel.text(x = 0.7, y = 2, labels = "range", cex = 1, srt = 90)
})
```

## Data selection
::::{.columns}
:::{.column width="50%"}
```{r selectingSpaceData}
#| out-width: "100%"
#| fig-align: "center"

spaceDf <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-08-06")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T) %>%
  filter(
    !((Study == "NCCA_WChem_2015") & (Latitude > 44.5))
  )
  # remove northwest and northeast bays

lakes <- sf::read_sf("../ne_50m_lakes.shp")
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf, aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
```
- Consider all points at first
:::

:::{.column width="50%"}
```{r}
sampleRange = data.frame()
df %>%
  ggplot(aes(x= sampleDateTime)) +
  geom_histogram() +
  geom_vline(aes(xintercept = ymd("2015-07-06"))) + 
  geom_vline(xintercept = ymd("2015-08-06")) +
  xlab("") +
  ggtitle("Samples through time")
```
- Removed points in northern bays to avoid over land distances
:::
::::

## Marginal Distribution 

```{r}
df %>%
  mutate(RESULT = exp(RESULT)) %>%
  ggplot(aes(x = RESULT)) +
  geom_histogram() +
  scale_x_continuous(transform = "log10") +
  xlab("Chl-A (ug/L)")
```
- Chl-a distribution symmetric with log transformation


## 1 week window
::::{.columns}
:::{.column width="50%"}
```{r week1}
#| fig-width: 6 
#| fig-height: 6 
#| out-width: "100%"
#| fig-align: "center"

week <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-13")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)

stations <- sp::SpatialPointsDataFrame(week %>% select(x, y), data= week %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 7, cutoff = NULL)
v <- v[v$np >2,]
metricVgm <- gstat::vgm(NA, basis,NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
full1week <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "Full 1 week")
full1week
```
:::

:::{.column width="50%"}
```{r}
metricVgm %>% gt::gt() %>%
  gt::tab_header("1 week")
```
:::
::::

## 2 week window
::::{.columns}
:::{.column width="50%"}
```{r week2}
week2 <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)


stations <- sp::SpatialPointsDataFrame(week2 %>% select(x, y), data= week2 %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 4, cutoff = NULL)
v <- v[v$np >4,]
metricVgm <- gstat::vgm(NA,basis,NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
full2week <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "Full 2 week")
full2week
```
:::

:::{.column width="50%"}
```{r}
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("2 weeks")
```
:::
::::

## 1 month window
::::{.columns}
:::{.column width="50%"}
```{r month}
month <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-08-06")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)


stations <- sp::SpatialPointsDataFrame(month %>% select(x, y), data= month %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 2, cutoff = 90)
#metricVgm <- gstat::vgm(NA,c("Exp", "Sph", "Gau", "Exc", "Mat", "Ste", "Cir", "Bes", "Pen"),NA,NA)
metricVgm <- gstat::vgm(NA,basis,NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
full1month <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "Full 1 month")
full1month
```
:::

:::{.column width="50%"}
```{r}
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("1 Month")
```
:::
::::
<!-- - Are there different regions with different correlation structures?-->


## Restricted spatial correlation (West/Center/East)
- E/W defined by 87.0 cutoff
- Center = GLENDA

## 1 month Western
```{r}
stations <- sp::SpatialPointsDataFrame(
  spaceDf %>% filter(Longitude < -87.0, Study != "GLENDA") %>% select(x, y),
  data= spaceDf %>% filter(Longitude < -87.0, Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Longitude < -87.0, Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)


v <- gstat::variogram(RESULT ~ 1, stations, width = 7, cutoff = 55)
metricVgm <- gstat::vgm(NA,c(basis, "Wav"),NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
west1month <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "West 1 month")
west1month
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Western")
```

## 1 month Bicoastal
```{r}
stations <- sp::SpatialPointsDataFrame(
  spaceDf %>% filter(Study != "GLENDA") %>% select(x, y),
  data= spaceDf %>% filter(Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
v <- gstat::variogram(RESULT~ 1, stations, width = 2, cutoff = 75)
v <- v[v$np > 5, ]
metricVgm <- gstat::vgm(NA,c(basis, "Wav"),NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
#plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
bicoast1month <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "Bicoastal 1 month")
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Bicoastal")
```

## Close spatial correlation (NOAA)
- NOAA June 2016 (most distinct sites in 1 month (n=9))
```{r noaaSpatial}
noaatimeDf <- df %>% 
  # alpha and omega happen to be near and far along same transect
  filter(
    Study == "NOAAwq",
    #SITE_ID %in% c("alpha","omega", "beta"),
    sampleDepth <5.1,
    year(sampleDateTime) == 2016,
    # 5 is densest month
    month(sampleDateTime) == 6
  ) %>%
  mutate(
    sampleDate = lubridate::round_date(sampleDateTime, "months"),
    ) %>%
  drop_na(sampleDate) %>%
  reframe(
    across(c("RESULT", "x", "y"), function(x) mean(x, na.rm = T)), 
    .by = c(SITE_ID, sampleDate)) %>%
  drop_na(RESULT) %>%
  filter(n() >= 1, .by = SITE_ID)



fullTimeDf <- expand.grid(SITE_ID = unique(noaatimeDf$SITE_ID), 
  sampleDate = seq(min(noaatimeDf$sampleDate), max(noaatimeDf$sampleDate), "months")) %>%
  full_join(noaatimeDf) %>%
  mutate(
    x = mean(x, na.rm = T), y = mean(y, na.rm = T), .by = SITE_ID) %>%
  select(SITE_ID, x, y, sampleDate, RESULT) %>%
  arrange(sampleDate, SITE_ID)

stations <- sp::SpatialPointsDataFrame(
  noaatimeDf %>% select(x, y),
  data= noaatimeDf %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 0.0001, cutoff = NULL)
#v <- v[v$np >2,]
metricVgm <- gstat::vgm(NA, basis,NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
noaa1month <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "NOAA 1 month")
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Close (NOAA)")
```



# Spatial summary
| Data | Range (km) | Model notes |
| ---- | ---------- | ----------- |
| Full (1 week) | 35  | OK (potentailly two curves) |
| Full (2 week) | 1.1  | good |
| Full (1 month) | 3.4  | good |
| West (1 month) | 20  | good (few points) |
| West (2 weeks) | None  | Flat |
| Bi-coastal (1 month) | 3 | < OK |
| Bi-coastal (1 month) | None | Flat |
| East (1 month) | None | Flat |
| East (2 weeks) | None  | Flat |
| NOAA (1 month) | | Bad (two groups?) |

# Time Dependence
- Autocorrelation describes similarity of time series over different intervals

[](https://en.wikipedia.org/wiki/File%3AAcf_new.svg)

## Distant Samples
```{r offshoreSelect}
#| fig-width: 8 
#| out-width: "100%"
#| fig-align: "center"

timeDf <- df %>%
  mutate(sampleDate = round_date(sampleDateTime, "weeks")) %>%
  filter(sampleDate > ymd("2010-01-01")) %>%
  mutate(count = n(), .by = c(Study, SITE_ID)) %>%
  filter(count == max(count, na.rm =T), .by = c(Study)) %>%
  filter(count > 9) %>% 
  drop_na(SITE_ID) %>%
  filter(SITE_ID %in% c("alpha", "MI41M", "Man_18"))

lakes <- sf::read_sf("../ne_50m_lakes.shp")
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= timeDf, aes(x = Longitude, y = Latitude, col = Study), size = 6,  alpha = 0.5)
```

```{r}
#| fig-height: 8 
#| out-width: "100%"
#| fig-align: "center"

timeDf %>% 
  ggplot(aes(x= sampleDate))  +
  geom_dotplot(method = "histodot") +
  facet_wrap(~Study, scales= "free", nrow=3)
```
- selected samples vs time
- nearshore and midlake



## Autocorrelations
```{r}
fullTimeDf <- expand.grid(SITE_ID = unique(timeDf$SITE_ID), 
  sampleDate = seq(min(timeDf$sampleDate), max(timeDf$sampleDate), "days")) %>%
  full_join(timeDf) %>%
  mutate(
    Study = unique(na.omit(Study)),
    Latitude = mean(Latitude, na.rm = T), Longitude = mean(Longitude, na.rm = T), .by = SITE_ID)

timeStations <- fullTimeDf %>%
  distinct(SITE_ID, Latitude, Longitude)

timeStations <- sp::SpatialPointsDataFrame(timeStations %>% distinct(Latitude, Longitude), 
  data= timeStations %>% select(-c(Latitude, Longitude)))

plots <- data.frame("Site", "acf", "lag")
for (site in unique(fullTimeDf$SITE_ID)){
  #print(site)
  timeStationsDF <- fullTimeDf %>%
    filter(SITE_ID == site) %>%
    distinct(SITE_ID, Latitude, Longitude, sampleDate, .keep_all=T)
  timeStations <- sp::SpatialPointsDataFrame(
    timeStationsDF %>%  distinct(Latitude, Longitude), 
    data= timeStationsDF %>%filter(SITE_ID == site) %>% distinct(SITE_ID))
  data = STFDF(
    timeStations,
    timeStationsDF %>% distinct(sampleDate) %>% arrange(sampleDate) %>% pull(sampleDate),
    timeStationsDF %>% filter(SITE_ID == site) %>% select(RESULT))
 test <- acf(as(data, "xts"), na.action = na.pass, plot=F)
 testDf <- data.frame(
  "lag" = test$lag / 360 / 24,
  "acf" = test$acf,
  "Site" = site
 )
  plots <- bind_rows(plots, testDf)
}
plots %>%
  drop_na(Site) %>%
  ggplot(aes(x= lag, xend = lag, yend = acf)) +
  geom_segment(y=0, lwd = 4) +
  facet_wrap(~Site, nrow=3, ncol=1) +
  xlab("Lag (days)")
```
- Most observed stations for GLENDA, NCCA (2015), and NOAA

## Near samples (NOAA)
```{r}
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= df %>% 
    filter(SITE_ID %in% c("alpha", "beta", "omega")) %>%
    distinct(Latitude, Longitude), aes(x = Longitude, y = Latitude), size = 4,  alpha = 0.5)
```

## Autocorrelation
```{r}
noaatimeDf <- df %>% 
  # alpha and omega happen to be near and far along same transect
  filter(
    Study == "NOAAwq",
    SITE_ID %in% c("alpha","omega", "beta"),
    sampleDepth <5.1 
  ) %>%
  mutate(
    sampleDate = lubridate::round_date(sampleDateTime, "weeks"),
    ) %>%
  drop_na(sampleDate) %>%
  reframe(
    across(c("RESULT", "Latitude", "Longitude"), function(x) mean(x, na.rm = T)), 
    .by = c(SITE_ID, sampleDate))


fullTimeDf <- expand.grid(SITE_ID = unique(noaatimeDf$SITE_ID), 
  sampleDate = seq(min(noaatimeDf$sampleDate), max(noaatimeDf$sampleDate), "weeks")) %>%
  full_join(noaatimeDf) %>%
  mutate(
    Latitude = mean(Latitude, na.rm = T), Longitude = mean(Longitude, na.rm = T), .by = SITE_ID) %>%
  select(SITE_ID, Latitude, Longitude, sampleDate, RESULT) %>%
  arrange(sampleDate, SITE_ID)


stDf <- spacetime::STFDF(
  sp::SpatialPoints(fullTimeDf %>% distinct(Latitude, Longitude)),
  fullTimeDf %>% distinct(sampleDate) %>% pull(sampleDate),
  data = fullTimeDf %>% distinct(Latitude,Longitude, sampleDate, .keep_all = T) %>% select(RESULT))

#alpha =1, omega = 2
# long term 
# can see the yearly
test <-acf(na.omit(as(stDf, "xts")), lag.max= 75, plot = F)
test$lag <- test$lag / (360 *24)
plot(test)
```


## Autocorrelation (1 year)
```{r}
#| echo: false

test <-acf(na.omit(as(stDf, "xts")), lag.max= 1000, plot = F, type = "correlation")
test$lag <- test$lag / (360 *24)
plot(test[c(0, 70, 140, 210, 280, 350),])
# print("Zoomed in to a single year (logged)")
# test$acf <- log(test$acf)
# plot(test[c(0, 70, 140, 210, 280, 350), 1], type = "p")
# 
# lm(log(test[c(0, 70, 140, 210, 280, 350), 1]$acf ), test[c(0, 70, 140, 210, 280, 350), 1]$lag)
```


# Time summary
- Seems like at sampling resolution, can assume samples indpendent (max 20% correlation)
- Can't determine when they are near enough in time to say they are same for combining...



# Joint Spatio-Temporal Variogram
- all data after 2015
- weekly time resolution

## Wireframe
::::{.columns}
:::{.column width="60%"}
```{r joint}
#| echo: false
 
recent <- df %>%
    mutate(sampleDate = round_date(sampleDateTime, "days")) %>%
    drop_na(Longitude, Latitude, sampleDate) %>%
    mutate(
      x = mean(x, na.rm = T),
      y = mean(y, na.rm = T),
      .by= SITE_ID
    ) %>%
    mutate(
      RESULT = mean(RESULT, na.rm = T),
      .by= c(SITE_ID, sampleDate)
    ) %>%
    filter(year(sampleDate) >= 2015) %>%
    select(SITE_ID, RESULT, sampleDate, x,y)

siteLats <- recent %>% distinct(x,y , SITE_ID)

fullTimeDf <- expand.grid(
  SITE_ID = unique(recent$SITE_ID), 
  sampleDate = seq(min(recent$sampleDate, na.rm = T),
    max(recent$sampleDate, na.rm= T), "days")
  ) %>%
  left_join(siteLats, by = "SITE_ID") %>%
  left_join(recent) %>%
  reframe(
    .by = c(sampleDate, SITE_ID), 
    across(c("x", "y", "RESULT"), function(x) mean(x, na.rm = T))
  ) %>%
  arrange(SITE_ID, sampleDate)

timeStations <- fullTimeDf %>% 
  mutate(
    x= mean(x, na.rm = T),
    y = mean(y, na.rm = T),
    .by = SITE_ID
  ) %>%
  distinct(SITE_ID, x, y)

timeStations <- sp::SpatialPointsDataFrame(timeStations %>% distinct(x, y), 
  data= timeStations %>% select(-c(x, y)))

data = STFDF(
  timeStations,
  fullTimeDf %>% distinct(sampleDate)  %>% pull(sampleDate),
  fullTimeDf %>% distinct(sampleDate, SITE_ID, RESULT) %>% select(RESULT))

vv = gstat::variogramST(RESULT~1, data, width=5,  tlags=0:30, cutoff = 82)

metricVgm <- gstat::vgmST("metric",
  joint=gstat::vgm(0.9,"Exp",30,0.1),
  stAni=3, sill = 0.08, fit.sills = T, fit.ranges= T)
metricVgm <- gstat::fit.StVariogram(vv, metricVgm)

sepVgm <- gstat::vgmST("separable",
  space=gstat::vgm(0.9,"Exp", 30, 0.1),
  time =gstat::vgm(0.3, "Exp", 1, 0.1),
  sill=0.08, fit.sills = F, fit.ranges =T)
sepVgm <- gstat::fit.StVariogram(
  vv, sepVgm, 
  lower=c(1e-6,1e-6,1e-6,1e-6,1e-6), 
  upper=c(1e5,1e5,1e5,1e5,1e5))
library(lattice)
test <- vv
test$gamma[test$gamma > 0.1] <- 0.15
test$gamma[test$gamma < 0.04] <- 0.02
plot(vv, list(metricVgm, sepVgm),
  all=T, wireframe=T, zlim=c(0.02,0.15),
  zlab=NULL,
  xlab=list("distance (km)", rot=30),
  ylab=list("time lag (days)", rot=-35),
  scales=list(arrows=F, z = list(distance = 5)))
```
:::

:::{.column width="60%"}
```{r}
metricVgm$joint %>% gt::gt() %>%
  gt::tab_header("Joint metric")
sepVgm$space %>% gt::gt() %>%
  gt::tab_header("Separable (space)")
sepVgm$time %>% gt::gt() %>%
  gt::tab_header("Separable (time)")

```
:::
::::

## Wireframe
```{r}
#| echo: false


plot(test, list(na.omit(metricVgm), na.omit(sepVgm)),
  all=T, zlim=c(0.02,0.20),
  zlab=NULL,
  xlab=list("distance (km)", rot=30),
  ylab=list("time lag (days)", rot=-35),
  scales=list(arrows=F, z = list(distance = 5)))
```



# Map for scale
```{r}
#| eval: true
#| echo: false

library(leaflet)
opacity = 0.33
weight =0.3 
m <- leaflet() %>% 
  addTiles() %>% setView(-86.5, 44, zoom = 7) %>%
  addCircles(data= spaceDf, group="10 km", fillColor = "black", color = "black", radius = 10 * 1000, opacity = opacity, fillOpacity = opacity, weight= weight) %>%
  addCircles(data= spaceDf, group="30 km", fillColor = "red", color = "red", radius = 30 * 1000, opacity = opacity, fillOpacity = opacity/2, weight= weight) %>%
  addCircles(data= spaceDf, group="60 km", fillColor = "blue", color = "blue", radius = 60 * 1000, opacity = opacity, fillOpacity = opacity/4, weight= weight) %>%
  addScaleBar() %>%
  addLayersControl(
      overlayGroups = c("10 km", "30 km", "60 km"),
    )
htmlwidgets::saveWidget(widget = m,
                        file = "radiusMap.html",
                        selfcontained = TRUE)
m
```


## all semis
```{r allSemis}
#| echo: false

full1week
full2week
full1month
west1month
bicoast1month
noaa1month
```

## Related
- [USGS simulated particle tracking in Lake Michigan. Gardner 2024](https://aslopubs.onlinelibrary.wiley.com/cms/asset/e13f8658-1dd8-4f35-a78c-d9b6836c835a/lol210414-fig-0001-m.jpg)
- [GLERL currents](https://www.glerl.noaa.gov/res/glcfs/anim.php?var=uv&lake=mih)
- The [meuse data](https://cran.r-project.org/web/packages/gstat/vignettes/gstat.pdf) set provided by package sp is a data set comprising of four
heavy metals measured in the top soil in a flood plain along the river Meuse,
along with a handful of covariates. The process governing heavy metal distribution seems that polluted sediment is carried by the river, and mostly deposited
close to the river bank, and areas with low elevation


## Completely exponential spatial

- 1 week window

```{r fullExponential}
#| fig-width: 6 
#| fig-height: 6 
#| out-width: "100%"
#| fig-align: "center"

basis <- "Exp"

week <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-13")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)

stations <- sp::SpatialPointsDataFrame(week %>% select(x, y), data= week %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 7, cutoff = NULL)
v <- v[v$np >2,]
metricVgm <- gstat::vgm(NA, basis,NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
full1week <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "Full 1 week")
full1week
metricVgm %>% gt::gt() %>%
  gt::tab_header("1 week")
```

- 2 week window
```{r}
week2 <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)


stations <- sp::SpatialPointsDataFrame(week2 %>% select(x, y), data= week2 %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 4, cutoff = NULL)
v <- v[v$np >4,]
metricVgm <- gstat::vgm(NA,basis,NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
full2week <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "Full 2 week")
full2week
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("2 weeks")
```

- 1 month window
```{r}
month <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-08-06")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)


stations <- sp::SpatialPointsDataFrame(month %>% select(x, y), data= month %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 2, cutoff = 90)
#metricVgm <- gstat::vgm(NA,c("Exp", "Sph", "Gau", "Exc", "Mat", "Ste", "Cir", "Bes", "Pen"),NA,NA)
metricVgm <- gstat::vgm(NA,basis,NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
full1month <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "Full 1 month")
full1month
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("1 Month")
```

## Restricted spatial correlation (West/Center/East)
- 1 month Western
```{r}
stations <- sp::SpatialPointsDataFrame(
  spaceDf %>% filter(Longitude < -87.0, Study != "GLENDA") %>% select(x, y),
  data= spaceDf %>% filter(Longitude < -87.0, Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Longitude < -87.0, Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)


v <- gstat::variogram(RESULT ~ 1, stations, width = 7, cutoff = 55)
metricVgm <- gstat::vgm(NA,c(basis, "Wav"),NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
west1month <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "West 1 month")
west1month
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Western")
```

- 1 month Bicoastal
```{r}
stations <- sp::SpatialPointsDataFrame(
  spaceDf %>% filter(Study != "GLENDA") %>% select(x, y),
  data= spaceDf %>% filter(Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
v <- gstat::variogram(RESULT~ 1, stations, width = 2, cutoff = 75)
v <- v[v$np > 5, ]
metricVgm <- gstat::vgm(NA,c(basis, "Wav"),NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
#plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
bicoast1month <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "Bicoastal 1 month")
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Bicoastal")
```

- Close spatial correlation (NOAA)
```{r}
noaatimeDf <- df %>% 
  # alpha and omega happen to be near and far along same transect
  filter(
    Study == "NOAAwq",
    #SITE_ID %in% c("alpha","omega", "beta"),
    sampleDepth <5.1,
    year(sampleDateTime) == 2016,
    # 5 is densest month
    month(sampleDateTime) == 6
  ) %>%
  mutate(
    sampleDate = lubridate::round_date(sampleDateTime, "months"),
    ) %>%
  drop_na(sampleDate) %>%
  reframe(
    across(c("RESULT", "x", "y"), function(x) mean(x, na.rm = T)), 
    .by = c(SITE_ID, sampleDate)) %>%
  drop_na(RESULT) %>%
  filter(n() >= 1, .by = SITE_ID)



fullTimeDf <- expand.grid(SITE_ID = unique(noaatimeDf$SITE_ID), 
  sampleDate = seq(min(noaatimeDf$sampleDate), max(noaatimeDf$sampleDate), "months")) %>%
  full_join(noaatimeDf) %>%
  mutate(
    x = mean(x, na.rm = T), y = mean(y, na.rm = T), .by = SITE_ID) %>%
  select(SITE_ID, x, y, sampleDate, RESULT) %>%
  arrange(sampleDate, SITE_ID)

stations <- sp::SpatialPointsDataFrame(
  noaatimeDf %>% select(x, y),
  data= noaatimeDf %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 0.0001, cutoff = NULL)
#v <- v[v$np >2,]
metricVgm <- gstat::vgm(NA, basis,NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
noaa1month <- plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T, main = "NOAA 1 month")
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Close (NOAA)")
```


## Anisotropy

- 1 week window

```{r}
basis <- "Exp"

week <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-13")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)

stations <- sp::SpatialPointsDataFrame(week %>% select(x, y), data= week %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 7, cutoff = NULL)
v <- v[v$np >2,]
metricVgm <- gstat::vgm(NA, basis,NA,NA, anis= c(90, 0.25))
metricVgmanis <- gstat::vgm(NA, basis,NA,NA, anis= c(90, 0.25))
metricVgm <- gstat::fit.variogram(v, metricVgm)
metricVgmanis <- gstat::fit.variogram(v, metricVgmanis)
full1week <- plot(v, list(metricVgm, metricVgmanis), cex = 5, pch = 20, identify =T, keep= T, main = "Full 1 week")
full1week
metricVgm %>% gt::gt() %>%
  gt::tab_header("1 week")
```