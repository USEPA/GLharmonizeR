---
title: Exploring autocorrelations
format:
  html:
    embed-resources: true
    code-fold: true
    toc: true
    toc-depth: 2
execute:
  cache: true
  echo: true
execute-dir: project
---

```{r setup}
# following https://cran.r-project.org/web/packages/gstat/vignettes/st.pdf
library(tidyverse)
library(spacetime)
library(lattice)
ggplot2::theme_set(theme_minimal(base_size= 12))
df <- readRDS("../fullData.Rds") %>% 
  filter(
    Longitude > -88,
    Longitude < -85,
    Latitude > 41.5,
    Latitude < 46,
    sampleDepth <= 5.1,
    CodeName == "Chla",
    !is.na(RESULT),
    ) %>%
  filter(
    Study != "NCCA_WChem_2015" | (Latitude < 44.5)
  )

# 4326 specifies WGS84 lat/lon coordinates
df_sf <- df %>% sf::st_as_sf(coords = c("Longitude", "Latitude"), crs=  4326)
# crsuggest::suggest_crs(df_sf, type = "projected", units = "m")
# this was suggested by Jon to cover the full great lakes making it easier to generalize
df_sf_proj <- sf::st_transform(df_sf, crs = "EPSG:3174")


test <- as.data.frame(df_sf_proj$geometry) %>%
  mutate(
    geometry = str_remove(geometry, "POINT \\("),
    geometry = str_remove(geometry, "c\\("),
    geometry = str_remove(geometry, "\\)"),
    ) %>%
  separate(geometry, into = c("x", "y"), sep = ", ") %>%
  mutate(across(everything(), function(z) as.numeric(z) / 1000))
# x and y are in km
df$x <- test$x
df$y <- test$y
```


# Marginal distribution
```{r}
df %>%
  ggplot(aes(x = RESULT)) +
  geom_histogram() +
  scale_x_log10() +
  xlab("CHLA")

df <- df %>%
  mutate(RESULT = log10(RESULT))
```
- note log10 scale

# Spatial correleation
![Measurements of distances in Lake Michigan.](LakeMichiganDistances.png)

- looking at July, 6th - August, 6th, 2015
```{r selectingSpaceData}
#| fig-width: 6
#| out-width: "100%"
#| fig-align: "center"

spaceDf <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-08-06")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)
  # remove northwest and northeast bays

lakes <- sf::read_sf("../ne_50m_lakes.shp")
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf, aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
```
- Removed points in northern bays

## spatial correlation modeling results
```{r week1}
#| fig-width: 6 
#| fig-height: 6 
#| out-width: "100%"
#| fig-align: "center"

week <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-13")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)
  # remove northwest and northeast bays
```


```{r week2}
stations <- sp::SpatialPointsDataFrame(week %>% select(x, y), data= week %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 6, cutoff = 50)
plot(v, cex = 5, pch = 20, identify =T, keep= T)
v$np
metricVgm <- gstat::vgm(NA,c("Exp", "Sph", "Gau", "Exc", "Mat", "Ste", "Cir", "Bes", "Pen"),NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("1 week")

week2 <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)


stations <- sp::SpatialPointsDataFrame(week2 %>% select(x, y), data= week2 %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 4, cutoff = 50)
plot(v, cex = 5, pch = 20, identify =T, keep= T)
v$np
metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("2 weeks")
```

```{r month}
month <- df %>% 
  # this was picked by inspecting histogram through time so could be improved upon
  filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-08-06")) %>%
  # filter(sampleDateTime > ymd("2015-07-06"), sampleDateTime < ymd("2015-07-20")) %>%
  # make it a single observation over time
  reframe(
    .by = c(SITE_ID, x, y, Longitude, Latitude, Study), 
    across(c("RESULT"), .fns = function(z) mean(z, na.rm = T))
    ) %>%
  distinct(x, y, .keep_all = T)


stations <- sp::SpatialPointsDataFrame(month %>% select(x, y), data= month %>% select(-c(x, y)))
v <- gstat::variogram(RESULT~ 1, stations, width = 2, cutoff = 50)
metricVgm <- gstat::vgm(NA,c("Exp", "Sph", "Gau", "Exc", "Mat", "Ste", "Cir", "Bes", "Pen"),NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("1 Month")
v <- gstat::variogram(RESULT~ 1, stations, width = 6)
metricVgm <- gstat::vgm(NA,"Per",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
```
- distance is km
- All data points
- Used default initial range (makes nonlinear fitting process)
  - Fit mean using GLS
  - Fit residuals (covariance) using Levenberg-Marquardt
  - [Software paper](https://www.sciencedirect.com/science/article/pii/S0098300404000676)

### Restricted spatial correlation (West/Center/East)
#### 1 month
- E/W defined by 87.0 cutoff
- Center = GLENDA
```{r WspatialCor}
stations <- sp::SpatialPointsDataFrame(
  spaceDf %>% filter(Longitude < -87.0, Study != "GLENDA") %>% select(x, y),
  data= spaceDf %>% filter(Longitude < -87.0, Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Longitude < -87.0, Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)


v <- gstat::variogram(RESULT ~ 1, stations, width = 7, cutoff = 100)
metricVgm <- gstat::vgm(NA,c("Exp", "Sph", "Gau", "Exc", "Mat", "Ste", "Cir", "Bes", "Pen", "Per"),NA,NA)
metricVgm <- gstat::vgm(0.5,c("Per"),NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Western")
```

```{r EspatialCor}
stations <- sp::SpatialPointsDataFrame(
  spaceDf %>% filter(Longitude > -87.0, Study != "GLENDA") %>% select(x, y),
  data= spaceDf %>% filter(Longitude > -87.0, Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Longitude > -87.0, Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
v <- gstat::variogram(RESULT ~ 1, stations, width = 6.5, cutoff = 60)
metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Eastern")
```

```{r CentralspatialCor}
stations <- sp::SpatialPointsDataFrame(
  spaceDf %>% filter(Study == "GLENDA") %>% select(x, y),
  data= spaceDf %>% filter(Study == "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Study == "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
v <- gstat::variogram(RESULT~ 1, stations, width=5)
metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
#plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Center")
```

```{r biCoastalSpaceCor}
stations <- sp::SpatialPointsDataFrame(
  spaceDf %>% filter(Study != "GLENDA") %>% select(x, y),
  data= spaceDf %>% filter(Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
v <- gstat::variogram(RESULT~ 1, stations, width = 2)
metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
#plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Bicoastal")
```
- West - Structured semivariance
- Central - Unstructured semivariance
- East - continually increasing semivariance
- BiCoast - dominated by West structure
- Full - 
- Mean function didn't make much difference
  - Stuck with just intercept - Seems to be consistent logically for out purposes

#### 2 week
```{r WspatialCor}
stations <- sp::SpatialPointsDataFrame(
  week2%>% filter(Longitude < -87.0, Study != "GLENDA") %>% select(x, y),
  data= week2 %>% filter(Longitude < -87.0, Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= week2 %>%filter(Longitude < -87.0, Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)


v <- gstat::variogram(RESULT ~ 1, stations, width = 5, cutoff = 50) metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Western")
```

```{r EspatialCor}
stations <- sp::SpatialPointsDataFrame(
  week2 %>% filter(Longitude > -87.0, Study != "GLENDA") %>% select(x, y),
  data= week2 %>% filter(Longitude > -87.0, Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= week2 %>%filter(Longitude > -87.0, Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
v <- gstat::variogram(RESULT ~ 1, stations, width = 8, cutoff = 100)
metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Eastern")
```

```{r CentralspatialCor}
stations <- sp::SpatialPointsDataFrame(
  week2 %>% filter(Study == "GLENDA") %>% select(x, y),
  data= week2 %>% filter(Study == "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Study == "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
v <- gstat::variogram(RESULT~ 1, stations, width=3, cutoff = 30)
metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
#plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Center")
```

```{r biCoastalSpaceCor}
stations <- sp::SpatialPointsDataFrame(
  week2 %>% filter(Study != "GLENDA") %>% select(x, y),
  data= week2 %>% filter(Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= spaceDf %>%filter(Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
v <- gstat::variogram(RESULT~ 1, stations, width = 3, cutoff =30)
metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
#plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Bicoastal")
```
- Can see a spike in middle of semivariogram (so set cutoff to that point, imagining this is due to lateral symmetry of the lake)

#### 1 week
```{r WspatialCor}
stations <- sp::SpatialPointsDataFrame(
  week %>% filter(Longitude < -87.0, Study != "GLENDA") %>% select(x, y),
  data= week %>% filter(Longitude < -87.0, Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= week %>%filter(Longitude < -87.0, Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)


v <- gstat::variogram(RESULT ~ 1, stations, width = 5, cutoff = 30) metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Western")
```
- very few points

```{r EspatialCor}
stations <- sp::SpatialPointsDataFrame(
  week %>% filter(Longitude > -87.0, Study != "GLENDA") %>% select(x, y),
  data= week %>% filter(Longitude > -87.0, Study != "GLENDA")%>% select(-c(x, y)))
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= week %>%filter(Longitude > -87.0, Study != "GLENDA"), aes(x = Longitude, y = Latitude, col = Study), size = 4,  alpha = 0.5)
v <- gstat::variogram(RESULT ~ 1, stations, width = 8, cutoff = 70)
metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v, metricVgm, cex = 5, pch = 20, identify =T, keep= T)
metricVgm %>% 
  gt::gt() %>%
  gt::tab_header("Eastern")
```
- too vew
- no central observations for this 1 week time period
 


# Time
```{r offshoreSelect}
#| fig-width: 8 
#| out-width: "100%"
#| fig-align: "center"

timeDf <- df %>%
  mutate(sampleDate = round_date(sampleDateTime, "weeks")) %>%
  filter(sampleDate > ymd("2010-01-01")) %>%
  mutate(count = n(), .by = c(Study, SITE_ID)) %>%
  filter(count == max(count, na.rm =T), .by = c(Study)) %>%
  filter(count > 10) %>% 
  drop_na(SITE_ID)

lakes <- sf::read_sf("../ne_50m_lakes.shp")
ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= timeDf, aes(x = -Longitude, y = Latitude, col = Study), size = 6,  alpha = 0.5)
```

```{r}
#| fig-height: 8 
#| out-width: "100%"
#| fig-align: "center"

timeDf %>% 
  ggplot(aes(x= sampleDate))  +
  geom_dotplot(method = "histodot") +
  facet_wrap(~Study, scales= "free", nrow=3)
```
- selected samples vs time
- nearshore and midlake



## Autocorrelations
```{r}
fullTimeDf <- expand.grid(SITE_ID = unique(timeDf$SITE_ID), 
  sampleDate = seq(min(timeDf$sampleDate), max(timeDf$sampleDate), "days")) %>%
  full_join(timeDf) %>%
  mutate(
    Study = unique(na.omit(Study)),
    Latitude = mean(Latitude, na.rm = T), Longitude = mean(Longitude, na.rm = T), .by = SITE_ID)

timeStations <- fullTimeDf %>%
  distinct(SITE_ID, Latitude, Longitude)

timeStations <- sp::SpatialPointsDataFrame(timeStations %>% distinct(Latitude, Longitude), 
  data= timeStations %>% select(-c(Latitude, Longitude)))

plots <- data.frame("Site", "acf", "lag")
for (site in unique(fullTimeDf$SITE_ID)){
  #print(site)
  timeStationsDF <- fullTimeDf %>%
    filter(SITE_ID == site) %>%
    distinct(SITE_ID, Latitude, Longitude, sampleDate, .keep_all=T)
  timeStations <- sp::SpatialPointsDataFrame(
    timeStationsDF %>%  distinct(Latitude, Longitude), 
    data= timeStationsDF %>%filter(SITE_ID == site) %>% distinct(SITE_ID))
  data = STFDF(
    timeStations,
    timeStationsDF %>% distinct(sampleDate) %>% arrange(sampleDate) %>% pull(sampleDate),
    timeStationsDF %>% filter(SITE_ID == site) %>% select(RESULT))
 test <- acf(as(data, "xts"), na.action = na.pass, plot=F)
 testDf <- data.frame(
  "lag" = test$lag / 360 / 24,
  "acf" = test$acf,
  "Site" = site
 )
  plots <- bind_rows(plots, testDf)
}
plots %>%
  mutate(Study = case_when(
    Site == "alpha" ~ "NOAA",
    Site == "MI18M" ~ "GLENDA",
    Site == "Fra_18" ~ "CSMI",
     )) %>%
  drop_na(Site, Study) %>%
  ggplot(aes(x= lag, xend = lag, yend = acf)) +
  geom_segment(y=0, lwd = 4) +
  facet_wrap(~Study, scale = "free", nrow=3, ncol=1) +
  xlab("Lag (days)")
```
- verified that lag is in days
- Most observed stations for GLENDA, NCCA (2015), and NOAA

# NOAA 
## NOAA autocorrelations
```{r}
noaatimeDf <- df %>% 
  # alpha and omega happen to be near and far along same transect
  filter(
    Study == "NOAAwq",
    SITE_ID %in% c("alpha","omega", "beta"),
    sampleDepth <5.1 
  ) %>%
  mutate(
    sampleDate = lubridate::round_date(sampleDateTime, "weeks"),
    ) %>%
  drop_na(sampleDate) %>%
  reframe(
    across(c("RESULT", "Latitude", "Longitude"), function(x) mean(x, na.rm = T)), 
    .by = c(SITE_ID, sampleDate))


fullTimeDf <- expand.grid(SITE_ID = unique(noaatimeDf$SITE_ID), 
  sampleDate = seq(min(noaatimeDf$sampleDate), max(noaatimeDf$sampleDate), "weeks")) %>%
  full_join(noaatimeDf) %>%
  mutate(
    Latitude = mean(Latitude, na.rm = T), Longitude = mean(Longitude, na.rm = T), .by = SITE_ID) %>%
  select(SITE_ID, Latitude, Longitude, sampleDate, RESULT) %>%
  arrange(sampleDate, SITE_ID)


stDf <- spacetime::STFDF(
  sp::SpatialPoints(fullTimeDf %>% distinct(Latitude, Longitude)),
  fullTimeDf %>% distinct(sampleDate) %>% pull(sampleDate),
  data = fullTimeDf %>% distinct(Latitude,Longitude, sampleDate, .keep_all = T) %>% select(RESULT))

#alpha =1, omega = 2
# long term 
# can see the yearly
test <-acf(na.omit(as(stDf, "xts")), lag.max= 100, plot = F)
test$lag <- test$lag / (360 *24)
plot(test)

test <-acf(na.omit(as(stDf, "xts")), lag.max= 1000, plot = F, type = "correlation")
test$lag <- test$lag / (360 *24)
print("Zoomed in to a single year")
plot(test[c(0, 70, 140, 210, 280, 350),])
# print("Zoomed in to a single year (logged)")
# test$acf <- log(test$acf)
# plot(test[c(0, 70, 140, 210, 280, 350), 1], type = "p")
# 
# lm(log(test[c(0, 70, 140, 210, 280, 350), 1]$acf ), test[c(0, 70, 140, 210, 280, 350), 1]$lag)

lb_test <- Box.test(test$acf[, 1,1], type = "Ljung-Box", lag = 3)
print(lb_test)



# shorter term (year by year)
#endregion for (i in 2007:2022){
#   tryCatch({
#     test <- acf(na.omit(as(stDf[, year(index(stDf@time)) == i], "xts")), na.action = na.pass, lag.max = 10, plot = F)
#     test$lag <- test$lag / (360 *24)
#     print(paste("YEAR", i))
#     plot(test)
#   },
#   error = function(e) {
#     message("Not enough observations")
#   })
# }


ggplot(lakes) +
  geom_sf(fill = "lightblue") +
  coord_sf(xlim = c(-88, -85), ylim = c(41.5, 46.2)) +
  theme(panel.background = element_rect(fill = '#d0d890'),
        panel.grid = element_line(color = '#00000010')) +
  geom_point(data= df %>% 
    filter(SITE_ID %in% c("alpha", "beta", "omega")) %>%
    distinct(Latitude, Longitude), aes(x = Longitude, y = Latitude), size = 4,  alpha = 0.5)
```

## noaa spatial correlation
- NOAA is densest in 2022 it looks like (for all three sites)
```{r noaaSpatial}
noaatimeDf <- df %>% 
  # alpha and omega happen to be near and far along same transect
  filter(
    Study == "NOAAwq",
    #SITE_ID %in% c("alpha","omega", "beta"),
    sampleDepth <5.1,
    year(sampleDateTime) == 2015,
    # 5 is densest month
    month(sampleDateTime) == 5 
  ) %>%
  mutate(
    sampleDate = lubridate::round_date(sampleDateTime, "months"),
    ) %>%
  drop_na(sampleDate) %>%
  reframe(
    across(c("RESULT", "x", "y"), function(x) mean(x, na.rm = T)), 
    .by = c(SITE_ID, sampleDate)) %>%
  drop_na(RESULT) %>%
  filter(n() >= 1, .by = SITE_ID)



fullTimeDf <- expand.grid(SITE_ID = unique(noaatimeDf$SITE_ID), 
  sampleDate = seq(min(noaatimeDf$sampleDate), max(noaatimeDf$sampleDate), "months")) %>%
  full_join(noaatimeDf) %>%
  mutate(
    x = mean(x, na.rm = T), y = mean(y, na.rm = T), .by = SITE_ID) %>%
  select(SITE_ID, x, y, sampleDate, RESULT) %>%
  arrange(sampleDate, SITE_ID)

stDf <- spacetime::STFDF(
  sp::SpatialPoints(fullTimeDf %>% distinct(x, y)),
  fullTimeDf %>% distinct(sampleDate) %>% pull(sampleDate),
  data = fullTimeDf %>% distinct(x,y, sampleDate, .keep_all = T) %>% select(RESULT))
# projected = FALSE,
# data are assumed to be unprojected, meaning decimal longitude/latitude. for unprojected great circle distances (km). In variogram.formula or variogram.gstat, for data deriving from class Spatial, projection is detected automatically using is.projected
v = gstat::variogram(RESULT~ x + y,
 sp::SpatialPointsDataFrame(fullTimeDf %>% distinct(x,y), 
fullTimeDf %>% distinct(x,y, .keep_all = T)
))
#metricVgm <- gstat::vgm(NA,"Exp",NA,NA)
#metricVgm <- gstat::fit.variogram(v, metricVgm)
plot(v)
```
- no convergence


# Summary
| Data | Range (km) | Model notes |
| ---- | ---------- | ----------- |
| Full | 16.6  | Good (potentailly two curves) |
| West | 15.5  | less than good |
| East | NA  | Linearly increasing |
| Center | 30  | semivariance small |
| Bicoastal| 13.9  | split between center and coasts? |


# Joint Spatio-Temporal Variogram
```{r}
noaa <- df %>%
    filter(Study == "NOAAwq") %>%
    mutate(sampleDate = round_date(sampleDateTime, "months")) %>%
    drop_na(Longitude, Latitude, sampleDate) %>%
    mutate(
      RESULT = mean(RESULT, na.rm = T),
      .by= c(Longitude, Latitude, SITE_ID, sampleDate)
    ) %>%
    filter(year(sampleDate) == 2015) %>%
    select(SITE_ID, RESULT, sampleDate)

siteLats <- df %>% filter(Study == "NOAAwq") %>% distinct(x,y , SITE_ID)

fullTimeDf <- expand.grid(
  SITE_ID = unique(noaa$SITE_ID), 
  sampleDate = seq(min(noaa$sampleDate, na.rm = T),
    max(noaa$sampleDate, na.rm= T), "months")
  ) %>%
  left_join(siteLats, by = "SITE_ID") %>%
  full_join(noaa) %>%
  reframe(
    .by = c(sampleDate, SITE_ID), 
    across(c("x", "y", "RESULT"), function(x) mean(x, na.rm = T))
  )

timeStations <- fullTimeDf %>%
  distinct(SITE_ID, x, y)
timeStations <- sp::SpatialPointsDataFrame(timeStations %>% distinct(x, y), 
  data= timeStations %>% select(-c(x, y)))

data = STFDF(
  timeStations,
  fullTimeDf %>% distinct(sampleDate) %>% pull(sampleDate),
  fullTimeDf %>% distinct(sampleDate, SITE_ID, RESULT) %>% select(RESULT))


vv = gstat::variogram(RESULT~1, data, width=10,  tlags=0:2, cutoff = 200)
plot(vv)

metricVgm <- gstat::vgmST("metric",
  joint=gstat::vgm(0.9,"Exp",30,0.1),
  stAni=100)
metricVgm <- gstat::fit.StVariogram(vv, metricVgm)
plot(vv, metricVgm)


sepVgm <- gstat::vgmST("separable",
  space=gstat::vgm(0.9,"Exp", 30, 0.1),
  time =gstat::vgm(0.3, "Exp", 1, 0.1),
  sill=2.5)
sepVgm <- gstat::fit.StVariogram(vv, sepVgm, method = "L-BFGS-B",
  lower=c(1,   0, 0.01, 0, 2), 
  upper=c(100, 1, 100  , 1, 3)) 
    # s-range, spaceparam , , , sill
plot(vv, sepVgm)
plot(vv, list(sepVgm, metricVgm))


library(lattice)
plot(vv, all=T, wireframe= T)

plot(vv, list(sepVgm, metricVgm), all=T, wireframe=T, zlim=c(0,5),
  zlab=NULL,
  xlab=list("distance (km)", rot=30),
  ylab=list("time lag (days)", rot=-35),
  scales=list(arrows=F, z = list(distance = 5)))
```

## Related
- [GLERL currents](https://www.glerl.noaa.gov/res/glcfs/anim.php?var=uv&lake=mih)
- The [meuse data](https://cran.r-project.org/web/packages/gstat/vignettes/gstat.pdf) set provided by package sp is a data set comprising of four
heavy metals measured in the top soil in a flood plain along the river Meuse,
along with a handful of covariates. The process governing heavy metal distribution seems that polluted sediment is carried by the river, and mostly deposited
close to the river bank, and areas with low elevation

```{r}
#| eval: false

library(leaflet)
opacity = 0.5
fillOpacity = 0
weight =1 
m <- leaflet() %>% 
  addTiles() %>% setView(-86.5, 44, zoom = 7) %>%
  addCircles(data= spaceDf, group="10 km", color = "black", radius = 10 * 1000, opacity = opacity, fillOpacity = fillOpacity, weight= weight) %>%
  addCircles(data= spaceDf, group="30 km", color = "red", radius = 30 * 1000, opacity = opacity, fillOpacity = fillOpacity, weight= weight) %>%
  addCircles(data= spaceDf, group="60 km", color = "blue", radius = 60 * 1000, opacity = opacity, fillOpacity = fillOpacity, weight= weight) %>%
  addScaleBar() %>%
  addLayersControl(
      overlayGroups = c("10 km", "30 km", "60 km"),
    )
htmlwidgets::saveWidget(widget = m,
                        file = "radiusMap.html",
                        selfcontained = TRUE)

```
