{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "> ",
        "df %>%",
        "+ ",
        "  drop_na(ANALYTE) %>%",
        "+ ",
        "  count(ANALYTE, SAMPLE_TYPE) %>%",
        "+ ",
        "  ggplot(aes(x = ANALYTE, y = n, fill = SAMPLE_TYPE)) +",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))",
        "> ",
        "df %>%",
        "+ ",
        "  drop_na(ANALYTE) %>%",
        "+ ",
        "  count(ANALYTE, SAMPLE_TYPE) %>%",
        "+ ",
        "  ggplot(aes(x = ANALYTE, y = n, fill = SAMPLE_TYPE)) +",
        "+ ",
        "  geom_bar(stat = \"identity\", position = \"fill\") +",
        "+ ",
        "  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))",
        "> ",
        "source(\"~/Projects/LM_Chla/Code/dataCleaning/readCleanGLENDA.R\", echo=TRUE)",
        "\n> library(tidyverse)\n\n> library(janitor)\n\n> # Useful links\n> # Water chemistry descriptions\n> # https://www.epa.gov/great-lakes-monitoring/great-lakes-water-quality-monitoring-program-0#chemis .... [TRUNCATED] \n",
        "> ",
        "df <- readCleanGLENDA(\"Data/Raw/GLENDA.csv\")",
        "> ",
        "unique(df$ANALYTE)",
        " [1] \"Chlorophyll-a\"                       \"Alkalinity, Total as CaCO3\"          \"Conductivity\"                       \n [4] \"pH\"                                  \"Turbidity\"                           \"Phosphorus, Total as P\"             \n [7] \"Oxygen, Dissolved\"                   \"Carbon, Organic\"                     \"Nitrogen, Total, Sediment\"          \n[10] \"Phosphorus, Total as P, Sediment\"    \"Chloride\"                            \"Phosphorus, Total as P, Particulate\"\n[13] \"Phosphorus, Orthophosphorus as P\"   ",
        " \"Moisture content\"                    \"Arsenic\"                            \n[16] \"Manganese\"                           \"Molybdenum\"                          \"Selenium\"                           \n[19] \"Magnesium\"                           \"Silica, Dissolved as Si\"             \"Sodium\"                             \n[22] \"Potassium\"                           \"Calcium\"                             \"Hardness, Total as CaCO3\"           \n[25] \"Nitrogen, Total Oxidized\"            \"Ammonia-Nitrogen\"                   ",
        " \"Silica, Total\"                      \n[28] \"Temperature\"                         \"Phosphorus, Elemental\"               \"Silicon, Elemental\"                 \n[31] \"Ammonium-Nitrogen\"                   \"Secchi Disc Transparency\"           \n",
        "> ",
        "df <- readCleanGLENDA(\"Data/Raw/GLENDA.csv\")",
        "> ",
        "unique(df$ANALYTE)",
        " [1] \"Chlorophyll-a\"                       \"Alkalinity, Total as CaCO3\"          \"Conductivity\"                       \n [4] \"pH\"                                  \"Turbidity\"                           \"Phosphorus, Total as P\"             \n [7] \"Oxygen, Dissolved\"                   \"Carbon, Organic\"                     \"Nitrogen, Total, Sediment\"          \n[10] \"Phosphorus, Total as P, Sediment\"    \"Chloride\"                            \"Phosphorus, Total as P, Particulate\"\n[13] \"Phosphorus, Orthophosphorus as P\"   ",
        " \"Moisture content\"                    \"Arsenic\"                            \n[16] \"Manganese\"                           \"Molybdenum\"                          \"Selenium\"                           \n[19] \"Magnesium\"                           \"Silica, Dissolved as Si\"             \"Sodium\"                             \n[22] \"Potassium\"                           \"Calcium\"                             \"Hardness, Total as CaCO3\"           \n[25] \"Nitrogen, Total Oxidized\"            \"Ammonia-Nitrogen\"                   ",
        " \"Silica, Total\"                      \n[28] \"Temperature\"                         \"Phosphorus, Elemental\"               \"Silicon, Elemental\"                 \n[31] \"Ammonium-Nitrogen\"                   \"Secchi Disc Transparency\"           \n",
        "> ",
        "df %>%",
        "+ ",
        "  drop_na(ANALYTE) %>%",
        "+ ",
        "  count(ANALYTE, SAMPLE_TYPE) %>%",
        "+ ",
        "  ggplot(aes(x = ANALYTE, y = n, fill = SAMPLE_TYPE)) +",
        "+ ",
        "  geom_bar(stat = \"identity\", position = \"fill\") +",
        "+ ",
        "  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))",
        "> ",
        "df %>%",
        "+ ",
        "  mutate(MONTH = factor(MONTH, levels = c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",",
        "+ ",
        "                                          \"September\", \"October\", \"November\", \"December\"))) %>%",
        "+ ",
        "  ggplot(aes(x = MONTH, group = SAMPLE_TYPE, fill = SAMPLE_TYPE)) +",
        "+ ",
        "  geom_bar() +",
        "+ ",
        "  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))",
        "> ",
        "colnames(df)",
        " [1] \"YEAR\"           \"MONTH\"          \"SEASON\"        \n [4] \"LAKE\"           \"CRUISE_ID\"      \"VISIT_ID\"      \n [7] \"STATION_ID\"     \"STN_DEPTH_M\"    \"LATITUDE\"      \n[10] \"LONGITUDE\"      \"SAMPLING_DATE\"  \"TIME_ZONE\"     \n[13] \"SAMPLE_DEPTH_M\" \"DEPTH_CODE\"     \"MEDIUM\"        \n[16] \"SAMPLE_TYPE\"    \"QC_TYPE\"        \"SAMPLE_ID\"     \n[19] \"ANALYTE\"        \"VALUE\"          \"UNITS\"         \n[22] \"FRACTION\"       \"METHOD\"         \"RESULT_REMARK\" \n[25] \"REMARK_RISK\"   \n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  mutate(MONTH = factor(MONTH, levels = c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",",
        "+ ",
        "                                          \"September\", \"October\", \"November\", \"December\"))) %>%",
        "+ ",
        "  ggplot(aes(x = MONTH, group = SAMPLE_TYPE, fill = SAMPLE_TYPE)) +",
        "+ ",
        "  geom_bar() +",
        "+ ",
        "  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  mutate(MONTH = factor(MONTH, levels = c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",",
        "+ ",
        "                                          \"September\", \"October\", \"November\", \"December\"))) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) ",
        "\u001B[38;5;246m# A tibble: 141 × 4\u001B[39m\n    YEAR MONTH    SAMPLE_TYPE     n\n   \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<fct>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m983 April    Individual      2\n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m983 May      Individual     17\n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m983 August   Individual     15\n\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m983 October  Individual      4\n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m984 April    Individual     10\n",
        "\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m984 May      Individual      4\n\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m984 August   Individual     12\n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m984 November Individual      2\n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m984 December Individual      2\n\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m985 February Individual      9\n\u001B[38;5;246m# ℹ 131 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  mutate(MONTH = factor(MONTH, levels = c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",",
        "+ ",
        "                                          \"September\", \"October\", \"November\", \"December\"))) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  group_by(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n))",
        "\u001B[38;5;246m# A tibble: 141 × 5\u001B[39m\n\u001B[38;5;246m# Groups:   YEAR, MONTH [110]\u001B[39m\n    YEAR MONTH    SAMPLE_TYPE     n total\n   \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<fct>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m983 April    Individual      2     2\n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m983 May      Individual     17    17\n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m983 August   Individual     15    15\n\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m983 October  Individual      4     4\n",
        "\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m984 April    Individual     10    10\n\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m984 May      Individual      4     4\n\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m984 August   Individual     12    12\n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m984 November Individual      2     2\n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m984 December Individual      2     2\n\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m985 February Individual      9     9\n\u001B[38;5;246m# ℹ 131 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "unique(df$SAMPLE_TYPE)",
        "[1] \"Composite\"   \"Individual\"  \"INSITU_MEAS\"\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  mutate(MONTH = factor(MONTH, levels = c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",",
        "+ ",
        "                                          \"September\", \"October\", \"November\", \"December\"))) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  group_by(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total ) %>%",
        "+ ",
        "  filter(SAMPLE_TYPE = \"Composite\")",
        "\u001B[1m\u001B[33mError\u001B[39m in `filter()`:\u001B[22m\n\u001B[38;5;255m\u001B[33m!\u001B[38;5;255m We detected a named input.\n\u001B[36mℹ\u001B[38;5;255m This usually means that you've used `=` instead of `==`.\n\u001B[36mℹ\u001B[38;5;255m Did you mean `SAMPLE_TYPE == \"Composite\"`?\u001B[39m\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  mutate(MONTH = factor(MONTH, levels = c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",",
        "+ ",
        "                                          \"September\", \"October\", \"November\", \"December\"))) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  group_by(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total ) %>%",
        "+ ",
        "  filter(SAMPLE_TYPE == \"Composite\")",
        "\u001B[38;5;246m# A tibble: 29 × 6\u001B[39m\n\u001B[38;5;246m# Groups:   YEAR, MONTH [29]\u001B[39m\n    YEAR MONTH     SAMPLE_TYPE     n total  prop\n   \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<fct>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m996 April     Composite       2     4 0.5  \n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m996 May       Composite       3     3 1    \n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m996 September Composite       6     6 1    \n",
        "\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m997 April     Composite       8     8 1    \n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m997 May       Composite       3     3 1    \n\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m997 September Composite      11    11 1    \n\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m998 March     Composite       8     8 1    \n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m998 April     Composite       3     3 1    \n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m998 September Composite       1     8 0.125\n\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m999 April     Composite      11    11 1    \n",
        "\u001B[38;5;246m# ℹ 19 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  mutate(MONTH = factor(MONTH, levels = c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",",
        "+ ",
        "                                          \"September\", \"October\", \"November\", \"December\"))) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  group_by(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total ) %>%",
        "+ ",
        "  filter(SAMPLE_TYPE == \"Composite\") %>%",
        "+ ",
        "  ggplot(aes(x = MONTH, y = prop, col = YEAR)) +",
        "+ ",
        "  geom_point()",
        "> ",
        "glimpse(df)",
        "Rows: 9,005\nColumns: 25\n$ YEAR           \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,…\n$ MONTH          \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"April\", \"April\", \"April\", \"April\", \"April\", \"April\", \"April\", \"April\",…\n$ SEASON         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Spring\", \"Spring\", \"Spring\", \"Spring\", \"Spring\", \"Spring\", \"Spring\", \"…\n$ LAKE           \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Michigan\", \"Michigan\", \"Michigan\", \"Michigan\", \"Michigan\", \"Michigan\",…\n$ CRUISE_ID      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", \"…\n$ VISIT_ID       \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"M017A00\", \"M011A00\", \"M017A00\", \"M017A00\", \"M017A00\", \"M017A00\", \"M017…\n$ STATION_ID     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"MI17\", \"MI11\", \"MI17\", \"MI17\", \"MI17\", \"MI17\", \"MI17\", \"MI17\", \"MI17\",…\n$ STN_DEPTH_M    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m 105.0, 131.8, 105.0, 105.0, 105.0, 105.0, 105.0, 105.0, 105.0, 105.0, 1…\n$ LATITUDE       \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m 42.73272, 42.38078, 42.73272, 42.73272, 42.73272, 42.73272, 42.73272, 4…\n$ LONGITUDE      \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m -87.41663, -86.99823, -87.41663, -87.41663, -87.41663, -87.41663, -87.4…\n$ SAMPLING_DATE  \u001B[3m\u001B[38;5;246m<date>\u001B[39m\u001B[23m 2000-04-09, 2000-04-09, 2000-04-09, 2000-04-09, 2000-04-09, 2000-04-09…\n$ TIME_ZONE      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"…\n$ SAMPLE_DEPTH_M \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m NA, 2, 2, 2, 2, 2, 2, 49, 49, 49, 49, 49, 89, 89, 89, 89, 89, 97, 97, 9…\n$ DEPTH_CODE     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Middle Depth\", \"Surface\", \"Surface\", \"Surface\", \"Surface\", \"Surface\", …\n$ MEDIUM         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"surface water\", \"surface water\", \"surface water\", \"surface water\", \"su…\n$ SAMPLE_TYPE    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Composite\", \"Individual\", \"Individual\", \"Individual\", \"Individual\", \"I…\n$ QC_TYPE        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"routine field sample\", \"routine field sample\", \"routine field sample\",…\n$ SAMPLE_ID      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"00GA25I32\", \"00GA25S01\", \"00GA25S21\", \"00GA25S21\", \"00GA25S21\", \"00GA2…\n$ ANALYTE        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Chlorophyll-a\", \"Chlorophyll-a\", \"Alkalinity, Total as CaCO3\", \"Chloro…\n$ VALUE          \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m 1.44, 0.03, 109.00, 1.44, 293.00, 8.20, 0.07, 108.50, 1.45, 292.00, 8.2…\n$ UNITS          \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"ug/l\", \"ug/l\", \"mg/l\", \"ug/l\", \"umho/cm\", \"none\", \"FTU\", \"mg/l\", \"ug/l…\n$ FRACTION       \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Residue\", \"Residue\", \"Total/Bulk\", \"Residue\", \"Total/Bulk\", \"Total/Bul…\n$ METHOD         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"LG405\", \"LG405\", \"LG500\", \"LG405\", \"LG500\", \"LG500\", \"LG500\", \"LG500\",…\n$ RESULT_REMARK  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Exceeded Holding Time\", \"Field Lab Anomaly\", \"Quality Control incomple…\n$ REMARK_RISK    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"MEDIUM\", \"HIGH\", \"MEDIUM\", \"MEDIUM\", \"MEDIUM\", \"MEDIUM\", \"MEDIUM\", \"ME…",
        "\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  group_by(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total ) %>%",
        "+ ",
        "  filter(SAMPLE_TYPE == \"Composite\") ",
        "\u001B[1m\u001B[33mError\u001B[39m in `mutate()`:\u001B[22m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m In argument: `total = sum(n)`.\n\u001B[36mℹ\u001B[38;5;255m In group 1: `YEAR = 1983`, `MONTH = \"April\"`.\u001B[39m\n\u001B[1mCaused by error in `sum()`:\u001B[22m\n\u001B[33m!\u001B[39m invalid 'type' (closure) of argument\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  group_by(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total ) %>%",
        "+ ",
        "  filter(SAMPLE_TYPE == \"Composite\") ",
        "\u001B[1m\u001B[33mError\u001B[39m in `mutate()`:\u001B[22m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m In argument: `total = sum(n)`.\n\u001B[36mℹ\u001B[38;5;255m In group 1: `YEAR = 1983`, `MONTH = \"April\"`.\u001B[39m\n\u001B[1mCaused by error in `sum()`:\u001B[22m\n\u001B[33m!\u001B[39m invalid 'type' (closure) of argument\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  group_by(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total ",
        "+ ",
        ")",
        "\u001B[1m\u001B[33mError\u001B[39m in `mutate()`:\u001B[22m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m In argument: `total = sum(n)`.\n\u001B[36mℹ\u001B[38;5;255m In group 1: `YEAR = 1983`, `MONTH = \"April\"`.\u001B[39m\n\u001B[1mCaused by error in `sum()`:\u001B[22m\n\u001B[33m!\u001B[39m invalid 'type' (closure) of argument\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  count(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total ) %>%",
        "+ ",
        "  filter(SAMPLE_TYPE == \"Composite\") ",
        "\u001B[1m\u001B[33mError\u001B[39m in `filter()`:\u001B[22m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m In argument: `SAMPLE_TYPE == \"Composite\"`.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'SAMPLE_TYPE' not found\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total ) %>%",
        "+ ",
        "  filter(SAMPLE_TYPE == \"Composite\") ",
        "\u001B[38;5;246m# A tibble: 29 × 6\u001B[39m\n    YEAR MONTH     SAMPLE_TYPE     n total     prop\n   \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m996 April     Composite       2  \u001B[4m1\u001B[24m028 0.001\u001B[4m9\u001B[24m\u001B[4m5\u001B[24m \n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m996 May       Composite       3  \u001B[4m1\u001B[24m028 0.002\u001B[4m9\u001B[24m\u001B[4m2\u001B[24m \n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m996 September Composite       6  \u001B[4m1\u001B[24m028 0.005\u001B[4m8\u001B[24m\u001B[4m4\u001B[24m \n",
        "\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m997 April     Composite       8  \u001B[4m1\u001B[24m028 0.007\u001B[4m7\u001B[24m\u001B[4m8\u001B[24m \n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m997 May       Composite       3  \u001B[4m1\u001B[24m028 0.002\u001B[4m9\u001B[24m\u001B[4m2\u001B[24m \n\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m997 September Composite      11  \u001B[4m1\u001B[24m028 0.010\u001B[4m7\u001B[24m  \n\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m998 April     Composite       3  \u001B[4m1\u001B[24m028 0.002\u001B[4m9\u001B[24m\u001B[4m2\u001B[24m \n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m998 March     Composite       8  \u001B[4m1\u001B[24m028 0.007\u001B[4m7\u001B[24m\u001B[4m8\u001B[24m \n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m998 September Composite       1  \u001B[4m1\u001B[24m028 0.000\u001B[4m9\u001B[24m\u001B[4m7\u001B[24m\u001B[4m3\u001B[24m\n",
        "\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m999 April     Composite      11  \u001B[4m1\u001B[24m028 0.010\u001B[4m7\u001B[24m  \n\u001B[38;5;246m# ℹ 19 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  group_by(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total ) %>%",
        "+ ",
        "  filter(SAMPLE_TYPE == \"Composite\") ",
        "\u001B[38;5;246m# A tibble: 29 × 6\u001B[39m\n\u001B[38;5;246m# Groups:   YEAR, MONTH [29]\u001B[39m\n    YEAR MONTH     SAMPLE_TYPE     n total  prop\n   \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m996 April     Composite       2     4 0.5  \n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m996 May       Composite       3     3 1    \n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m996 September Composite       6     6 1    \n",
        "\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m997 April     Composite       8     8 1    \n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m997 May       Composite       3     3 1    \n\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m997 September Composite      11    11 1    \n\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m998 April     Composite       3     3 1    \n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m998 March     Composite       8     8 1    \n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m998 September Composite       1     8 0.125\n\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m999 April     Composite      11    11 1    \n",
        "\u001B[38;5;246m# ℹ 19 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  group_by(YEAR, MONTH) %>%",
        "+ ",
        "  mutate(total = sum(n), prop = n/total )",
        "\u001B[38;5;246m# A tibble: 141 × 6\u001B[39m\n\u001B[38;5;246m# Groups:   YEAR, MONTH [110]\u001B[39m\n    YEAR MONTH    SAMPLE_TYPE     n total  prop\n   \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m983 April    Individual      2     2     1\n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m983 August   Individual     15    15     1\n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m983 May      Individual     17    17     1\n",
        "\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m983 October  Individual      4     4     1\n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m984 April    Individual     10    10     1\n\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m984 August   Individual     12    12     1\n\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m984 December Individual      2     2     1\n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m984 May      Individual      4     4     1\n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m984 November Individual      2     2     1\n\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m985 April    Individual     11    11     1\n\u001B[38;5;246m# ℹ 131 more rows\u001B[39m\n",
        "\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE)",
        "\u001B[38;5;246m# A tibble: 141 × 4\u001B[39m\n    YEAR MONTH    SAMPLE_TYPE     n\n   \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m983 April    Individual      2\n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m983 August   Individual     15\n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m983 May      Individual     17\n\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m983 October  Individual      4\n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m984 April    Individual     10\n",
        "\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m984 August   Individual     12\n\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m984 December Individual      2\n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m984 May      Individual      4\n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m984 November Individual      2\n\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m985 April    Individual     11\n\u001B[38;5;246m# ℹ 131 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  pivot_wider(id_cols = c(\"YEAR\", \"MONTH\"), values_from = \"n\", names_from = \"SAMPLE_TYPE\")",
        "\u001B[38;5;246m# A tibble: 110 × 5\u001B[39m\n    YEAR MONTH    Individual Composite INSITU_MEAS\n   \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m         \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m       \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m983 April             2        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m983 August           15        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m983 May              17        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n",
        "\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m983 October           4        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m984 April            10        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m984 August           12        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m984 December          2        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m984 May               4        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m984 November          2        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n",
        "\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m985 April            11        \u001B[31mNA\u001B[39m          \u001B[31mNA\u001B[39m\n\u001B[38;5;246m# ℹ 100 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  pivot_wider(id_cols = c(\"YEAR\", \"MONTH\"), values_from = \"n\", names_from = \"SAMPLE_TYPE\") %>%",
        "+ ",
        "  mutate(total = Individual + Composite + INSITU_MEAS, prop= Composite / total) %>%",
        "+ ",
        "  select(YEAR, MONTH, prop)",
        "\u001B[38;5;246m# A tibble: 110 × 3\u001B[39m\n    YEAR MONTH     prop\n   \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m 1\u001B[39m  \u001B[4m1\u001B[24m983 April       \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 2\u001B[39m  \u001B[4m1\u001B[24m983 August      \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 3\u001B[39m  \u001B[4m1\u001B[24m983 May         \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 4\u001B[39m  \u001B[4m1\u001B[24m983 October     \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 5\u001B[39m  \u001B[4m1\u001B[24m984 April       \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 6\u001B[39m  \u001B[4m1\u001B[24m984 August      \u001B[31mNA\u001B[39m\n",
        "\u001B[38;5;250m 7\u001B[39m  \u001B[4m1\u001B[24m984 December    \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 8\u001B[39m  \u001B[4m1\u001B[24m984 May         \u001B[31mNA\u001B[39m\n\u001B[38;5;250m 9\u001B[39m  \u001B[4m1\u001B[24m984 November    \u001B[31mNA\u001B[39m\n\u001B[38;5;250m10\u001B[39m  \u001B[4m1\u001B[24m985 April       \u001B[31mNA\u001B[39m\n\u001B[38;5;246m# ℹ 100 more rows\u001B[39m\n\u001B[38;5;246m# ℹ Use `print(n = ...)` to see more rows\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  pivot_wider(id_cols = c(\"YEAR\", \"MONTH\"), values_from = \"n\", names_from = \"SAMPLE_TYPE\") %>%",
        "+ ",
        "  replace_na(0) %>%",
        "+ ",
        "  mutate(total = Individual + Composite + INSITU_MEAS, prop= Composite / total) %>%",
        "+ ",
        "  select(YEAR, MONTH, prop)",
        "\u001B[1m\u001B[33mError\u001B[39m in `replace_na()`:\u001B[22m\n\u001B[38;5;255m\u001B[33m!\u001B[38;5;255m `replace` must be a list, not a number.\u001B[39m\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "df %>%",
        "+ ",
        "  distinct(VISIT_ID, .keep_all = T) %>%",
        "+ ",
        "  count(YEAR, MONTH, SAMPLE_TYPE) %>%",
        "+ ",
        "  pivot_wider(id_cols = c(\"YEAR\", \"MONTH\"), values_from = \"n\", names_from = \"SAMPLE_TYPE\") %>%",
        "+ ",
        "  replace_na(0) ",
        "\u001B[1m\u001B[33mError\u001B[39m in `replace_na()`:\u001B[22m\n\u001B[38;5;255m\u001B[33m!\u001B[38;5;255m `replace` must be a list, not a number.\u001B[39m\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "unique(df$ANALYTE)",
        " [1] \"Chlorophyll-a\"                       \"Alkalinity, Total as CaCO3\"         \n [3] \"Conductivity\"                        \"pH\"                                 \n [5] \"Turbidity\"                           \"Phosphorus, Total as P\"             \n [7] \"Oxygen, Dissolved\"                   \"Carbon, Organic\"                    \n [9] \"Nitrogen, Total, Sediment\"           \"Phosphorus, Total as P, Sediment\"   \n[11] \"Chloride\"                            \"Phosphorus, Total as P, Particulate\"\n[13] \"Phosphorus, Orthophosphorus as P\"   ",
        " \"Moisture content\"                   \n[15] \"Arsenic\"                             \"Manganese\"                          \n[17] \"Molybdenum\"                          \"Selenium\"                           \n[19] \"Magnesium\"                           \"Silica, Dissolved as Si\"            \n[21] \"Sodium\"                              \"Potassium\"                          \n[23] \"Calcium\"                             \"Hardness, Total as CaCO3\"           \n[25] \"Nitrogen, Total Oxidized\"            \"Ammonia-Nitrogen\"                   ",
        "\n[27] \"Silica, Total\"                       \"Temperature\"                        \n[29] \"Phosphorus, Elemental\"               \"Silicon, Elemental\"                 \n[31] \"Ammonium-Nitrogen\"                   \"Secchi Disc Transparency\"           \n",
        "> ",
        "df <- read_csv(\"Data/Raw/GLENDA.csv\",",
        "+ ",
        "         col_types = cols(YEAR = \"i\",",
        "+ ",
        "                          STN_DEPTH_M = \"d\",",
        "+ ",
        "                          LATITUDE = \"d\",",
        "+ ",
        "                          LONGITUDE = \"d\",",
        "+ ",
        "                          SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                          SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                          # Skip useless or redundant columns",
        "+ ",
        "                          Row = \"-\",",
        "+ ",
        "                          .default = \"c\")) %>%",
        "+ ",
        "  # Select samples that haven't been combined",
        "+ ",
        "  # filter(QC_TYPE == \"routine field sample\",",
        "+ ",
        "         #SAMPLE_TYPE != \"Composite\"",
        "+ ",
        "  #       ) %>%",
        "+ ",
        "  # These columns are redundant with the \"Analyte\" columns",
        "+ ",
        "  select(-contains(\"ANL_CODE_\")) %>%",
        "+ ",
        "  pivot_longer(cols = -c(1:18),",
        "+ ",
        "               names_to = c(\".value\", \"Number\"),",
        "+ ",
        "               names_pattern = \"(.*)_(\\\\d*)$\",",
        "+ ",
        "  ) %>%",
        "+ ",
        "  # If value and results are missing, we assume sample was never taken",
        "+ ",
        "  filter(!is.na(VALUE) & !is.na(RESULT_REMARK)) %>%",
        "+ ",
        "  filter(is.na(as.numeric(VALUE)) | VALUE == \"0\") %>%",
        "+ ",
        "  select(ANALYTE, METHOD, VALUE, RESULT_REMARK, YEAR) %>%",
        "+ ",
        "  group_by(ANALYTE, METHOD, VALUE, RESULT_REMARK) %>%",
        "+ ",
        "  summarize(n = n(), FirstYear = min(YEAR, na.rm = T), LastYear = max(YEAR, na.rm=T)) %>%",
        "+ ",
        "  left_join(remarkCodes, by= c(\"RESULT_REMARK\"= \"NAME\")) %>%",
        "+ ",
        "  unite(FirstYear, LastYear, col = \"Years\", sep = \"-\", remove= T ) %>%",
        "+ ",
        "  arrange(ANALYTE, Years, METHOD) %>%",
        "+ ",
        "  select(ANALYTE, METHOD, Years, VALUE, n, CLASS, CODE, RESULT_REMARK, DESCRIPTION) %>%",
        "+ ",
        "  map_df(str_replace_all, pattern = \",\", replacement = \".\") %>%",
        "+ ",
        "  write.csv(\"Data/Formatted/naList.csv\", quote = F, row.names = F)",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [===============---------------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [====================================================] \u001B[32m704.62MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                  \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'ANALYTE', 'METHOD', 'VALUE'. You can override using the\n`.groups` argument.\u001B[39m\n",
        "Warning message:\n",
        "\u001B[38;5;255mThere was 1 warning in `filter()`.\u001B[39m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m In argument: `is.na(as.numeric(VALUE)) | VALUE == \"0\"`.\u001B[39m\nCaused by warning:\n\u001B[33m!\u001B[39m NAs introduced by coercion \n",
        "> ",
        "df <- read_csv(\"Data/Raw/GLENDA.csv\",",
        "+ ",
        "         col_types = cols(YEAR = \"i\",",
        "+ ",
        "                          STN_DEPTH_M = \"d\",",
        "+ ",
        "                          LATITUDE = \"d\",",
        "+ ",
        "                          LONGITUDE = \"d\",",
        "+ ",
        "                          SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                          SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                          # Skip useless or redundant columns",
        "+ ",
        "                          Row = \"-\",",
        "+ ",
        "                          .default = \"c\")) %>%",
        "+ ",
        "  # Select samples that haven't been combined",
        "+ ",
        "  # filter(QC_TYPE == \"routine field sample\",",
        "+ ",
        "         #SAMPLE_TYPE != \"Composite\"",
        "+ ",
        "  #       ) %>%",
        "+ ",
        "  # These columns are redundant with the \"Analyte\" columns",
        "+ ",
        "  select(-contains(\"ANL_CODE_\")) %>%",
        "+ ",
        "  pivot_longer(cols = -c(1:18),",
        "+ ",
        "               names_to = c(\".value\", \"Number\"),",
        "+ ",
        "               names_pattern = \"(.*)_(\\\\d*)$\",",
        "+ ",
        "  ) %>%",
        "+ ",
        "  # If value and results are missing, we assume sample was never taken",
        "+ ",
        "  filter(!is.na(VALUE) & !is.na(RESULT_REMARK)) %>%",
        "+ ",
        "  filter(is.na(as.numeric(VALUE)) | VALUE == \"0\") %>%",
        "+ ",
        "  select(ANALYTE, METHOD, VALUE, RESULT_REMARK, YEAR) %>%",
        "+ ",
        "  group_by(ANALYTE, METHOD, VALUE, RESULT_REMARK) %>%",
        "+ ",
        "  summarize(n = n(), FirstYear = min(YEAR, na.rm = T), LastYear = max(YEAR, na.rm=T)) %>%",
        "+ ",
        "  left_join(remarkCodes, by= c(\"RESULT_REMARK\"= \"NAME\")) %>%",
        "+ ",
        "  unite(FirstYear, LastYear, col = \"Years\", sep = \"-\", remove= T ) %>%",
        "+ ",
        "  arrange(ANALYTE, Years, METHOD) %>%",
        "+ ",
        "  select(ANALYTE, METHOD, Years, VALUE, n, CLASS, CODE, RESULT_REMARK, DESCRIPTION) %>%",
        "+ ",
        "  map_df(str_replace_all, pattern = \",\", replacement = \".\") ",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [===========-------------------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [====================================================] \u001B[32m535.45MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                  \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'ANALYTE', 'METHOD', 'VALUE'. You can override using the\n`.groups` argument.\u001B[39m\n",
        "Warning message:\n",
        "\u001B[38;5;255mThere was 1 warning in `filter()`.\u001B[39m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m In argument: `is.na(as.numeric(VALUE)) | VALUE == \"0\"`.\u001B[39m\nCaused by warning:\n\u001B[33m!\u001B[39m NAs introduced by coercion \n",
        "> ",
        "unique(df$ANALYTE)",
        " [1] \"Alkalinity. Total as CaCO3\"       \"Ammonia-Nitrogen\"                \n [3] \"Ammonium-Nitrogen\"                \"Arsenic\"                         \n [5] \"Calcium\"                          \"Chloride\"                        \n [7] \"Chlorophyll-a\"                    \"Conductivity\"                    \n [9] \"Hardness. Total as CaCO3\"         \"Magnesium\"                       \n[11] \"Manganese\"                        \"Molybdenum\"                      \n[13] \"Nitrogen. Total Oxidized\"         \"Nitrogen. Total. Sediment\"       ",
        "\n[15] \"Oxygen. Dissolved\"                \"Phosphorus. Orthophosphorus as P\"\n[17] \"Phosphorus. Total as P\"           \"Phosphorus. Total as P. Sediment\"\n[19] \"Potassium\"                        \"Secchi Disc Transparency\"        \n[21] \"Selenium\"                         \"Silica. Total\"                   \n[23] \"Silicon. Elemental\"               \"Sodium\"                          \n[25] \"Temperature\"                      \"Turbidity\"                       \n[27] \"pH\"                              \n",
        "> ",
        "df <- read_csv(\"Data/Raw/GLENDA.csv\",",
        "+ ",
        "         col_types = cols(YEAR = \"i\",",
        "+ ",
        "                          STN_DEPTH_M = \"d\",",
        "+ ",
        "                          LATITUDE = \"d\",",
        "+ ",
        "                          LONGITUDE = \"d\",",
        "+ ",
        "                          SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                          SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                          # Skip useless or redundant columns",
        "+ ",
        "                          Row = \"-\",",
        "+ ",
        "                          .default = \"c\")) %>%",
        "+ ",
        "  # Select samples that haven't been combined",
        "+ ",
        "  # filter(QC_TYPE == \"routine field sample\",",
        "+ ",
        "         #SAMPLE_TYPE != \"Composite\"",
        "+ ",
        "  #       ) %>%",
        "+ ",
        "  # These columns are redundant with the \"Analyte\" columns",
        "+ ",
        "  select(-contains(\"ANL_CODE_\")) %>%",
        "+ ",
        "  pivot_longer(cols = -c(1:18),",
        "+ ",
        "               names_to = c(\".value\", \"Number\"),",
        "+ ",
        "               names_pattern = \"(.*)_(\\\\d*)$\",",
        "+ ",
        "  )",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [===========-------------------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [====================================================] \u001B[32m571.62MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                  \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n",
        "> ",
        "unique(df$ANALYTE)",
        " [1] \"Alkalinity, Total as CaCO3\"          \"Chlorophyll-a\"                      \n [3] \"Chloride\"                            \"Conductivity\"                       \n [5] \"Nitrogen, Total Oxidized\"            \"Phosphorus, Total as P\"             \n [7] \"pH\"                                  \"Silica, Dissolved as Si\"            \n [9] \"Turbidity\"                           NA                                   \n[11] \"Temperature\"                         \"Oxygen, Dissolved\"                  \n[13] \"Carbon, Organic\"                    ",
        " \"Nitrogen, Total, Sediment\"          \n[15] \"Phosphorus, Total as P, Sediment\"    \"Sodium\"                             \n[17] \"Calcium\"                             \"Magnesium\"                          \n[19] \"Nitrogen, Total, Particulate\"        \"Suspended solids, total\"            \n[21] \"Phosphorus, Total as P, Particulate\" \"Phosphorus, Orthophosphorus as P\"   \n[23] \"Hardness, Total as CaCO3\"            \"Phosphorus, Base Extractable as P\"  \n[25] \"Secchi Disc Transparency\"            \"Nitrogen, Total\"                    ",
        "\n[27] \"Moisture content\"                    \"Arsenic\"                            \n[29] \"Potassium\"                           \"Manganese\"                          \n[31] \"Molybdenum\"                          \"Selenium\"                           \n[33] \"Ammonia-Nitrogen\"                    \"Silica, Total\"                      \n[35] \"Phosphorus, Elemental\"               \"Silicon, Elemental\"                 \n[37] \"Ammonium-Nitrogen\"                  \n",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -c(1:18),",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\")",
        "+ ",
        "}",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [======================--------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [====================================================] \u001B[32m770.16MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                  \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n",
        "> ",
        "glimpse(df)",
        "Rows: 333,284\nColumns: 26\n$ YEAR           \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000…\n$ MONTH          \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"April\", \"April\", \"April\", \"April\", \"April\", \"April\", \"April\", \"April\"…\n$ SEASON         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Spring\", \"Spring\", \"Spring\", \"Spring\", \"Spring\", \"Spring\", \"Spring\", …\n$ LAKE           \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Michigan\", \"Michigan\", \"Michigan\", \"Michigan\", \"Michigan\", \"Michigan\"…\n$ CRUISE_ID      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", …\n$ VISIT_ID       \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"M018A00\", \"M018A00\", \"M018A00\", \"M018A00\", \"M018A00\", \"M018A00\", \"M01…\n$ STATION_ID     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"MI18M\", \"MI18M\", \"MI18M\", \"MI18M\", \"MI18M\", \"MI18M\", \"MI18M\", \"MI18M\"…\n$ STN_DEPTH_M    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m 165.1, 165.1, 165.1, 165.1, 165.1, 165.1, 165.1, 165.1, 165.1, 165.1, …\n$ LATITUDE       \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m 42.73108, 42.73108, 42.73108, 42.73108, 42.73108, 42.73108, 42.73108, …\n$ LONGITUDE      \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m -87.00123, -87.00123, -87.00123, -87.00123, -87.00123, -87.00123, -87.…\n$ SAMPLING_DATE  \u001B[3m\u001B[38;5;246m<date>\u001B[39m\u001B[23m 2000-04-09, 2000-04-09, 2000-04-09, 2000-04-09, 2000-04-09, 2000-04-0…\n$ TIME_ZONE      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", …\n$ SAMPLE_DEPTH_M \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ DEPTH_CODE     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ MEDIUM         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"surface water\", \"surface water\", \"surface water\", \"surface water\", \"s…\n$ SAMPLE_TYPE    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Individual\", \"Individual\", \"Individual\", \"Individual\", \"Individual\", …\n$ QC_TYPE        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"lab duplicate\", \"lab duplicate\", \"lab duplicate\", \"lab duplicate\", \"l…\n$ SAMPLE_ID      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"00GA25C43\", \"00GA25C43\", \"00GA25C43\", \"00GA25C43\", \"00GA25C43\", \"00GA…\n$ Number         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"…\n$ ANL_CODE       \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Alk-tot as CaCO3\", \"Chlor-a\", \"Cl-\", \"Cond\", \"NO2+NO3\", \"P-tot\", \"P-t…\n$ ANALYTE        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Alkalinity, Total as CaCO3\", \"Chlorophyll-a\", \"Chloride\", \"Conductivi…\n$ VALUE          \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"108.5\", \"0.60\", \"10.810\", \"293\", \"0.315\", \"2.431\", \"4.094\", \"8.17\", \"…\n$ UNITS          \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"mg/l\", \"ug/l\", \"mg/l\", \"umho/cm\", \"mg/l\", \"ug/l\", \"ug/l\", \"none\", \"mg…\n$ FRACTION       \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Total/Bulk\", \"Residue\", \"Total/Bulk\", \"Total/Bulk\", \"Total/Bulk\", \"Fi…\n$ METHOD         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"LG500\", \"LG405\", \"LG205\", \"LG500\", \"LG203\", \"LG204\", \"LG204\", \"LG500\"…\n$ RESULT_REMARK  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Quality Control incomplete\", NA, NA, \"Quality Control incomplete\", NA…",
        "\n",
        "> ",
        "dim(df)",
        "[1] 333284     26\n",
        "> ",
        "df <- read_csv(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [==================------------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [====================================================] \u001B[32m788.59MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                  \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n\u001B[1mRows: \u001B[22m\u001B[34m11903\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m209\u001B[39m\n",
        "\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m───────────────────────────────────────────────────────────────────────\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (194): MONTH, SEASON, LAKE, CRUISE_ID, VISIT_ID, STATION_ID, SAMPLING_DATE, TIME_ZONE, ...\n\u001B[32mdbl\u001B[39m   (9): Row, YEAR, STN_DEPTH_M, LATITUDE, LONGITUDE, SAMPLE_DEPTH_M, VALUE_16, VALUE_26,...\n\u001B[33mlgl\u001B[39m   (6): RESULT_REMARK_21, RESULT_REMARK_24, RESULT_REMARK_25, RESULT_REMARK_26, RESULT_R...\n",
        "\n\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n",
        "Warning message:\n",
        "\u001B[38;5;255mOne or more parsing issues, call `problems()` on your data frame for details, e.g.:\n  dat <- vroom(...)\n  problems(dat)\u001B[39m \n",
        "> ",
        "colnames(df)",
        "  [1] \"Row\"              \"YEAR\"             \"MONTH\"            \"SEASON\"          \n  [5] \"LAKE\"             \"CRUISE_ID\"        \"VISIT_ID\"         \"STATION_ID\"      \n  [9] \"STN_DEPTH_M\"      \"LATITUDE\"         \"LONGITUDE\"        \"SAMPLING_DATE\"   \n [13] \"TIME_ZONE\"        \"SAMPLE_DEPTH_M\"   \"DEPTH_CODE\"       \"MEDIUM\"          \n [17] \"SAMPLE_TYPE\"      \"QC_TYPE\"          \"SAMPLE_ID\"        \"ANL_CODE_1\"      \n [21] \"ANALYTE_1\"        \"VALUE_1\"          \"UNITS_1\"          \"FRACTION_1\"      \n [25] \"METHOD_1\"        ",
        " \"RESULT_REMARK_1\"  \"ANL_CODE_2\"       \"ANALYTE_2\"       \n [29] \"VALUE_2\"          \"UNITS_2\"          \"FRACTION_2\"       \"METHOD_2\"        \n [33] \"RESULT_REMARK_2\"  \"ANL_CODE_3\"       \"ANALYTE_3\"        \"VALUE_3\"         \n [37] \"UNITS_3\"          \"FRACTION_3\"       \"METHOD_3\"         \"RESULT_REMARK_3\" \n [41] \"ANL_CODE_4\"       \"ANALYTE_4\"        \"VALUE_4\"          \"UNITS_4\"         \n [45] \"FRACTION_4\"       \"METHOD_4\"         \"RESULT_REMARK_4\"  \"ANL_CODE_5\"      \n [49] \"ANALYTE_5\"        \"VALUE_5\"          \"UNITS_5\"         ",
        " \"FRACTION_5\"      \n [53] \"METHOD_5\"         \"RESULT_REMARK_5\"  \"ANL_CODE_6\"       \"ANALYTE_6\"       \n [57] \"VALUE_6\"          \"UNITS_6\"          \"FRACTION_6\"       \"METHOD_6\"        \n [61] \"RESULT_REMARK_6\"  \"ANL_CODE_7\"       \"ANALYTE_7\"        \"VALUE_7\"         \n [65] \"UNITS_7\"          \"FRACTION_7\"       \"METHOD_7\"         \"RESULT_REMARK_7\" \n [69] \"ANL_CODE_8\"       \"ANALYTE_8\"        \"VALUE_8\"          \"UNITS_8\"         \n [73] \"FRACTION_8\"       \"METHOD_8\"         \"RESULT_REMARK_8\"  \"ANL_CODE_9\"      \n",
        " [77] \"ANALYTE_9\"        \"VALUE_9\"          \"UNITS_9\"          \"FRACTION_9\"      \n [81] \"METHOD_9\"         \"RESULT_REMARK_9\"  \"ANL_CODE_10\"      \"ANALYTE_10\"      \n [85] \"VALUE_10\"         \"UNITS_10\"         \"FRACTION_10\"      \"METHOD_10\"       \n [89] \"RESULT_REMARK_10\" \"ANL_CODE_11\"      \"ANALYTE_11\"       \"VALUE_11\"        \n [93] \"UNITS_11\"         \"FRACTION_11\"      \"METHOD_11\"        \"RESULT_REMARK_11\"\n [97] \"ANL_CODE_12\"      \"ANALYTE_12\"       \"VALUE_12\"         \"UNITS_12\"        \n[101] \"FRACTION_12\"     ",
        " \"METHOD_12\"        \"RESULT_REMARK_12\" \"ANL_CODE_13\"     \n[105] \"ANALYTE_13\"       \"VALUE_13\"         \"UNITS_13\"         \"FRACTION_13\"     \n[109] \"METHOD_13\"        \"RESULT_REMARK_13\" \"ANL_CODE_14\"      \"ANALYTE_14\"      \n[113] \"VALUE_14\"         \"UNITS_14\"         \"FRACTION_14\"      \"METHOD_14\"       \n[117] \"RESULT_REMARK_14\" \"ANL_CODE_15\"      \"ANALYTE_15\"       \"VALUE_15\"        \n[121] \"UNITS_15\"         \"FRACTION_15\"      \"METHOD_15\"        \"RESULT_REMARK_15\"\n[125] \"ANL_CODE_16\"      \"ANALYTE_16\"       \"VALUE_16\"        ",
        " \"UNITS_16\"        \n[129] \"FRACTION_16\"      \"METHOD_16\"        \"RESULT_REMARK_16\" \"ANL_CODE_17\"     \n[133] \"ANALYTE_17\"       \"VALUE_17\"         \"UNITS_17\"         \"FRACTION_17\"     \n[137] \"METHOD_17\"        \"RESULT_REMARK_17\" \"ANL_CODE_18\"      \"ANALYTE_18\"      \n[141] \"VALUE_18\"         \"UNITS_18\"         \"FRACTION_18\"      \"METHOD_18\"       \n[145] \"RESULT_REMARK_18\" \"ANL_CODE_19\"      \"ANALYTE_19\"       \"VALUE_19\"        \n[149] \"UNITS_19\"         \"FRACTION_19\"      \"METHOD_19\"        \"RESULT_REMARK_19\"\n",
        "[153] \"ANL_CODE_20\"      \"ANALYTE_20\"       \"VALUE_20\"         \"UNITS_20\"        \n[157] \"FRACTION_20\"      \"METHOD_20\"        \"RESULT_REMARK_20\" \"ANL_CODE_21\"     \n[161] \"ANALYTE_21\"       \"VALUE_21\"         \"UNITS_21\"         \"FRACTION_21\"     \n[165] \"METHOD_21\"        \"RESULT_REMARK_21\" \"ANL_CODE_22\"      \"ANALYTE_22\"      \n[169] \"VALUE_22\"         \"UNITS_22\"         \"FRACTION_22\"      \"METHOD_22\"       \n[173] \"RESULT_REMARK_22\" \"ANL_CODE_23\"      \"ANALYTE_23\"       \"VALUE_23\"        \n[177] \"UNITS_23\"        ",
        " \"FRACTION_23\"      \"METHOD_23\"        \"RESULT_REMARK_23\"\n[181] \"ANL_CODE_24\"      \"ANALYTE_24\"       \"VALUE_24\"         \"UNITS_24\"        \n[185] \"FRACTION_24\"      \"METHOD_24\"        \"RESULT_REMARK_24\" \"ANL_CODE_25\"     \n[189] \"ANALYTE_25\"       \"VALUE_25\"         \"UNITS_25\"         \"FRACTION_25\"     \n[193] \"METHOD_25\"        \"RESULT_REMARK_25\" \"ANL_CODE_26\"      \"ANALYTE_26\"      \n[197] \"VALUE_26\"         \"UNITS_26\"         \"FRACTION_26\"      \"METHOD_26\"       \n[201] \"RESULT_REMARK_26\" \"ANL_CODE_27\"      \"ANALYTE_27\"      ",
        " \"VALUE_27\"        \n[205] \"UNITS_27\"         \"FRACTION_27\"      \"METHOD_27\"        \"RESULT_REMARK_27\"\n[209] \"...209\"          \n",
        "> ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -Row:SAMPLE_ID,",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\")",
        "Error: object 'filepath' not found\n",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -Row:SAMPLE_ID,",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\")",
        "+ ",
        "}",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [==============----------------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [====================================================] \u001B[32m762.54MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                  \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n\u001B[1m\u001B[33mError\u001B[39m in `pivot_longer()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't subset columns that don't exist.\n\u001B[31m✖\u001B[39m Column `Row` doesn't exist.\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "colnames(df)",
        "  [1] \"Row\"              \"YEAR\"             \"MONTH\"            \"SEASON\"          \n  [5] \"LAKE\"             \"CRUISE_ID\"        \"VISIT_ID\"         \"STATION_ID\"      \n  [9] \"STN_DEPTH_M\"      \"LATITUDE\"         \"LONGITUDE\"        \"SAMPLING_DATE\"   \n [13] \"TIME_ZONE\"        \"SAMPLE_DEPTH_M\"   \"DEPTH_CODE\"       \"MEDIUM\"          \n [17] \"SAMPLE_TYPE\"      \"QC_TYPE\"          \"SAMPLE_ID\"        \"ANL_CODE_1\"      \n [21] \"ANALYTE_1\"        \"VALUE_1\"          \"UNITS_1\"          \"FRACTION_1\"      \n [25] \"METHOD_1\"        ",
        " \"RESULT_REMARK_1\"  \"ANL_CODE_2\"       \"ANALYTE_2\"       \n [29] \"VALUE_2\"          \"UNITS_2\"          \"FRACTION_2\"       \"METHOD_2\"        \n [33] \"RESULT_REMARK_2\"  \"ANL_CODE_3\"       \"ANALYTE_3\"        \"VALUE_3\"         \n [37] \"UNITS_3\"          \"FRACTION_3\"       \"METHOD_3\"         \"RESULT_REMARK_3\" \n [41] \"ANL_CODE_4\"       \"ANALYTE_4\"        \"VALUE_4\"          \"UNITS_4\"         \n [45] \"FRACTION_4\"       \"METHOD_4\"         \"RESULT_REMARK_4\"  \"ANL_CODE_5\"      \n [49] \"ANALYTE_5\"        \"VALUE_5\"          \"UNITS_5\"         ",
        " \"FRACTION_5\"      \n [53] \"METHOD_5\"         \"RESULT_REMARK_5\"  \"ANL_CODE_6\"       \"ANALYTE_6\"       \n [57] \"VALUE_6\"          \"UNITS_6\"          \"FRACTION_6\"       \"METHOD_6\"        \n [61] \"RESULT_REMARK_6\"  \"ANL_CODE_7\"       \"ANALYTE_7\"        \"VALUE_7\"         \n [65] \"UNITS_7\"          \"FRACTION_7\"       \"METHOD_7\"         \"RESULT_REMARK_7\" \n [69] \"ANL_CODE_8\"       \"ANALYTE_8\"        \"VALUE_8\"          \"UNITS_8\"         \n [73] \"FRACTION_8\"       \"METHOD_8\"         \"RESULT_REMARK_8\"  \"ANL_CODE_9\"      \n",
        " [77] \"ANALYTE_9\"        \"VALUE_9\"          \"UNITS_9\"          \"FRACTION_9\"      \n [81] \"METHOD_9\"         \"RESULT_REMARK_9\"  \"ANL_CODE_10\"      \"ANALYTE_10\"      \n [85] \"VALUE_10\"         \"UNITS_10\"         \"FRACTION_10\"      \"METHOD_10\"       \n [89] \"RESULT_REMARK_10\" \"ANL_CODE_11\"      \"ANALYTE_11\"       \"VALUE_11\"        \n [93] \"UNITS_11\"         \"FRACTION_11\"      \"METHOD_11\"        \"RESULT_REMARK_11\"\n [97] \"ANL_CODE_12\"      \"ANALYTE_12\"       \"VALUE_12\"         \"UNITS_12\"        \n[101] \"FRACTION_12\"     ",
        " \"METHOD_12\"        \"RESULT_REMARK_12\" \"ANL_CODE_13\"     \n[105] \"ANALYTE_13\"       \"VALUE_13\"         \"UNITS_13\"         \"FRACTION_13\"     \n[109] \"METHOD_13\"        \"RESULT_REMARK_13\" \"ANL_CODE_14\"      \"ANALYTE_14\"      \n[113] \"VALUE_14\"         \"UNITS_14\"         \"FRACTION_14\"      \"METHOD_14\"       \n[117] \"RESULT_REMARK_14\" \"ANL_CODE_15\"      \"ANALYTE_15\"       \"VALUE_15\"        \n[121] \"UNITS_15\"         \"FRACTION_15\"      \"METHOD_15\"        \"RESULT_REMARK_15\"\n[125] \"ANL_CODE_16\"      \"ANALYTE_16\"       \"VALUE_16\"        ",
        " \"UNITS_16\"        \n[129] \"FRACTION_16\"      \"METHOD_16\"        \"RESULT_REMARK_16\" \"ANL_CODE_17\"     \n[133] \"ANALYTE_17\"       \"VALUE_17\"         \"UNITS_17\"         \"FRACTION_17\"     \n[137] \"METHOD_17\"        \"RESULT_REMARK_17\" \"ANL_CODE_18\"      \"ANALYTE_18\"      \n[141] \"VALUE_18\"         \"UNITS_18\"         \"FRACTION_18\"      \"METHOD_18\"       \n[145] \"RESULT_REMARK_18\" \"ANL_CODE_19\"      \"ANALYTE_19\"       \"VALUE_19\"        \n[149] \"UNITS_19\"         \"FRACTION_19\"      \"METHOD_19\"        \"RESULT_REMARK_19\"\n",
        "[153] \"ANL_CODE_20\"      \"ANALYTE_20\"       \"VALUE_20\"         \"UNITS_20\"        \n[157] \"FRACTION_20\"      \"METHOD_20\"        \"RESULT_REMARK_20\" \"ANL_CODE_21\"     \n[161] \"ANALYTE_21\"       \"VALUE_21\"         \"UNITS_21\"         \"FRACTION_21\"     \n[165] \"METHOD_21\"        \"RESULT_REMARK_21\" \"ANL_CODE_22\"      \"ANALYTE_22\"      \n[169] \"VALUE_22\"         \"UNITS_22\"         \"FRACTION_22\"      \"METHOD_22\"       \n[173] \"RESULT_REMARK_22\" \"ANL_CODE_23\"      \"ANALYTE_23\"       \"VALUE_23\"        \n[177] \"UNITS_23\"        ",
        " \"FRACTION_23\"      \"METHOD_23\"        \"RESULT_REMARK_23\"\n[181] \"ANL_CODE_24\"      \"ANALYTE_24\"       \"VALUE_24\"         \"UNITS_24\"        \n[185] \"FRACTION_24\"      \"METHOD_24\"        \"RESULT_REMARK_24\" \"ANL_CODE_25\"     \n[189] \"ANALYTE_25\"       \"VALUE_25\"         \"UNITS_25\"         \"FRACTION_25\"     \n[193] \"METHOD_25\"        \"RESULT_REMARK_25\" \"ANL_CODE_26\"      \"ANALYTE_26\"      \n[197] \"VALUE_26\"         \"UNITS_26\"         \"FRACTION_26\"      \"METHOD_26\"       \n[201] \"RESULT_REMARK_26\" \"ANL_CODE_27\"      \"ANALYTE_27\"      ",
        " \"VALUE_27\"        \n[205] \"UNITS_27\"         \"FRACTION_27\"      \"METHOD_27\"        \"RESULT_REMARK_27\"\n[209] \"...209\"          \n",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -YEAR:SAMPLE_ID,",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\")",
        "+ ",
        "}",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [===============---------------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [====================================================] \u001B[32m695.28MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                                  \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n\u001B[1m\u001B[33mError\u001B[39m in `pivot_longer()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't recycle `..1` (size 202351) to match `..3` (size 0).\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "Warning message:\n",
        "In x:y :",
        " numerical expression has 207 elements: only the first used\n",
        "> ",
        "1:4",
        "[1] 1 2 3 4\n",
        "> ",
        "?pick",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -pick(YEAR:SAMPLE_ID),",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\")",
        "+ ",
        "}",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [===========---------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [==========================================] \u001B[32m643.32MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                        \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n\u001B[1m\u001B[33mError\u001B[39m in `pivot_longer()`:\u001B[22m\n\u001B[33m!\u001B[39m Problem while evaluating `pick(YEAR:SAMPLE_ID)`.\n\u001B[1mCaused by error in `pick()`:\u001B[22m\n\u001B[38;5;255m\u001B[33m!\u001B[38;5;255m Must only be used inside data-masking verbs like `mutate()`, `filter()`,\n  and `group_by()`.\u001B[39m\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "colnames(df)",
        "  [1] \"Row\"              \"YEAR\"             \"MONTH\"            \"SEASON\"          \n  [5] \"LAKE\"             \"CRUISE_ID\"        \"VISIT_ID\"         \"STATION_ID\"      \n  [9] \"STN_DEPTH_M\"      \"LATITUDE\"         \"LONGITUDE\"        \"SAMPLING_DATE\"   \n [13] \"TIME_ZONE\"        \"SAMPLE_DEPTH_M\"   \"DEPTH_CODE\"       \"MEDIUM\"          \n [17] \"SAMPLE_TYPE\"      \"QC_TYPE\"          \"SAMPLE_ID\"        \"ANL_CODE_1\"      \n [21] \"ANALYTE_1\"        \"VALUE_1\"          \"UNITS_1\"          \"FRACTION_1\"      \n [25] \"METHOD_1\"        ",
        " \"RESULT_REMARK_1\"  \"ANL_CODE_2\"       \"ANALYTE_2\"       \n [29] \"VALUE_2\"          \"UNITS_2\"          \"FRACTION_2\"       \"METHOD_2\"        \n [33] \"RESULT_REMARK_2\"  \"ANL_CODE_3\"       \"ANALYTE_3\"        \"VALUE_3\"         \n [37] \"UNITS_3\"          \"FRACTION_3\"       \"METHOD_3\"         \"RESULT_REMARK_3\" \n [41] \"ANL_CODE_4\"       \"ANALYTE_4\"        \"VALUE_4\"          \"UNITS_4\"         \n [45] \"FRACTION_4\"       \"METHOD_4\"         \"RESULT_REMARK_4\"  \"ANL_CODE_5\"      \n [49] \"ANALYTE_5\"        \"VALUE_5\"          \"UNITS_5\"         ",
        " \"FRACTION_5\"      \n [53] \"METHOD_5\"         \"RESULT_REMARK_5\"  \"ANL_CODE_6\"       \"ANALYTE_6\"       \n [57] \"VALUE_6\"          \"UNITS_6\"          \"FRACTION_6\"       \"METHOD_6\"        \n [61] \"RESULT_REMARK_6\"  \"ANL_CODE_7\"       \"ANALYTE_7\"        \"VALUE_7\"         \n [65] \"UNITS_7\"          \"FRACTION_7\"       \"METHOD_7\"         \"RESULT_REMARK_7\" \n [69] \"ANL_CODE_8\"       \"ANALYTE_8\"        \"VALUE_8\"          \"UNITS_8\"         \n [73] \"FRACTION_8\"       \"METHOD_8\"         \"RESULT_REMARK_8\"  \"ANL_CODE_9\"      \n",
        " [77] \"ANALYTE_9\"        \"VALUE_9\"          \"UNITS_9\"          \"FRACTION_9\"      \n [81] \"METHOD_9\"         \"RESULT_REMARK_9\"  \"ANL_CODE_10\"      \"ANALYTE_10\"      \n [85] \"VALUE_10\"         \"UNITS_10\"         \"FRACTION_10\"      \"METHOD_10\"       \n [89] \"RESULT_REMARK_10\" \"ANL_CODE_11\"      \"ANALYTE_11\"       \"VALUE_11\"        \n [93] \"UNITS_11\"         \"FRACTION_11\"      \"METHOD_11\"        \"RESULT_REMARK_11\"\n [97] \"ANL_CODE_12\"      \"ANALYTE_12\"       \"VALUE_12\"         \"UNITS_12\"        \n[101] \"FRACTION_12\"     ",
        " \"METHOD_12\"        \"RESULT_REMARK_12\" \"ANL_CODE_13\"     \n[105] \"ANALYTE_13\"       \"VALUE_13\"         \"UNITS_13\"         \"FRACTION_13\"     \n[109] \"METHOD_13\"        \"RESULT_REMARK_13\" \"ANL_CODE_14\"      \"ANALYTE_14\"      \n[113] \"VALUE_14\"         \"UNITS_14\"         \"FRACTION_14\"      \"METHOD_14\"       \n[117] \"RESULT_REMARK_14\" \"ANL_CODE_15\"      \"ANALYTE_15\"       \"VALUE_15\"        \n[121] \"UNITS_15\"         \"FRACTION_15\"      \"METHOD_15\"        \"RESULT_REMARK_15\"\n[125] \"ANL_CODE_16\"      \"ANALYTE_16\"       \"VALUE_16\"        ",
        " \"UNITS_16\"        \n[129] \"FRACTION_16\"      \"METHOD_16\"        \"RESULT_REMARK_16\" \"ANL_CODE_17\"     \n[133] \"ANALYTE_17\"       \"VALUE_17\"         \"UNITS_17\"         \"FRACTION_17\"     \n[137] \"METHOD_17\"        \"RESULT_REMARK_17\" \"ANL_CODE_18\"      \"ANALYTE_18\"      \n[141] \"VALUE_18\"         \"UNITS_18\"         \"FRACTION_18\"      \"METHOD_18\"       \n[145] \"RESULT_REMARK_18\" \"ANL_CODE_19\"      \"ANALYTE_19\"       \"VALUE_19\"        \n[149] \"UNITS_19\"         \"FRACTION_19\"      \"METHOD_19\"        \"RESULT_REMARK_19\"\n",
        "[153] \"ANL_CODE_20\"      \"ANALYTE_20\"       \"VALUE_20\"         \"UNITS_20\"        \n[157] \"FRACTION_20\"      \"METHOD_20\"        \"RESULT_REMARK_20\" \"ANL_CODE_21\"     \n[161] \"ANALYTE_21\"       \"VALUE_21\"         \"UNITS_21\"         \"FRACTION_21\"     \n[165] \"METHOD_21\"        \"RESULT_REMARK_21\" \"ANL_CODE_22\"      \"ANALYTE_22\"      \n[169] \"VALUE_22\"         \"UNITS_22\"         \"FRACTION_22\"      \"METHOD_22\"       \n[173] \"RESULT_REMARK_22\" \"ANL_CODE_23\"      \"ANALYTE_23\"       \"VALUE_23\"        \n[177] \"UNITS_23\"        ",
        " \"FRACTION_23\"      \"METHOD_23\"        \"RESULT_REMARK_23\"\n[181] \"ANL_CODE_24\"      \"ANALYTE_24\"       \"VALUE_24\"         \"UNITS_24\"        \n[185] \"FRACTION_24\"      \"METHOD_24\"        \"RESULT_REMARK_24\" \"ANL_CODE_25\"     \n[189] \"ANALYTE_25\"       \"VALUE_25\"         \"UNITS_25\"         \"FRACTION_25\"     \n[193] \"METHOD_25\"        \"RESULT_REMARK_25\" \"ANL_CODE_26\"      \"ANALYTE_26\"      \n[197] \"VALUE_26\"         \"UNITS_26\"         \"FRACTION_26\"      \"METHOD_26\"       \n[201] \"RESULT_REMARK_26\" \"ANL_CODE_27\"      \"ANALYTE_27\"      ",
        " \"VALUE_27\"        \n[205] \"UNITS_27\"         \"FRACTION_27\"      \"METHOD_27\"        \"RESULT_REMARK_27\"\n[209] \"...209\"          \n",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -c(1:18),",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\")",
        "+ ",
        "}",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [===========---------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [==========================================] \u001B[32m633.84MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                        \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n",
        "> ",
        "glimpse(df)",
        "Rows: 333,284\nColumns: 26\n$ YEAR           \u001B[3m\u001B[38;5;246m<int>\u001B[39m\u001B[23m 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, …\n$ MONTH          \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"April\", \"April\", \"April\", \"April\", \"April\", \"April\", \"April…\n$ SEASON         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Spring\", \"Spring\", \"Spring\", \"Spring\", \"Spring\", \"Spring\", …\n$ LAKE           \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Michigan\", \"Michigan\", \"Michigan\", \"Michigan\", \"Michigan\", …\n$ CRUISE_ID      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", \"SP2000\", …\n$ VISIT_ID       \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"M018A00\", \"M018A00\", \"M018A00\", \"M018A00\", \"M018A00\", \"M018…\n$ STATION_ID     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"MI18M\", \"MI18M\", \"MI18M\", \"MI18M\", \"MI18M\", \"MI18M\", \"MI18M…\n$ STN_DEPTH_M    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m 165.1, 165.1, 165.1, 165.1, 165.1, 165.1, 165.1, 165.1, 165.…\n$ LATITUDE       \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m 42.73108, 42.73108, 42.73108, 42.73108, 42.73108, 42.73108, …\n$ LONGITUDE      \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m -87.00123, -87.00123, -87.00123, -87.00123, -87.00123, -87.0…\n$ SAMPLING_DATE  \u001B[3m\u001B[38;5;246m<date>\u001B[39m\u001B[23m 2000-04-09, 2000-04-09, 2000-04-09, 2000-04-09, 2000-04-09,…\n$ TIME_ZONE      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST\", \"EST…\n$ SAMPLE_DEPTH_M \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ DEPTH_CODE     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ MEDIUM         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"surface water\", \"surface water\", \"surface water\", \"surface …\n$ SAMPLE_TYPE    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Individual\", \"Individual\", \"Individual\", \"Individual\", \"Ind…\n$ QC_TYPE        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"lab duplicate\", \"lab duplicate\", \"lab duplicate\", \"lab dupl…\n$ SAMPLE_ID      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"00GA25C43\", \"00GA25C43\", \"00GA25C43\", \"00GA25C43\", \"00GA25C…\n$ Number         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12…\n$ ANL_CODE       \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Alk-tot as CaCO3\", \"Chlor-a\", \"Cl-\", \"Cond\", \"NO2+NO3\", \"P-…\n$ ANALYTE        \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Alkalinity, Total as CaCO3\", \"Chlorophyll-a\", \"Chloride\", \"…\n$ VALUE          \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"108.5\", \"0.60\", \"10.810\", \"293\", \"0.315\", \"2.431\", \"4.094\",…\n$ UNITS          \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"mg/l\", \"ug/l\", \"mg/l\", \"umho/cm\", \"mg/l\", \"ug/l\", \"ug/l\", \"…\n$ FRACTION       \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Total/Bulk\", \"Residue\", \"Total/Bulk\", \"Total/Bulk\", \"Total/…\n$ METHOD         \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"LG500\", \"LG405\", \"LG205\", \"LG500\", \"LG203\", \"LG204\", \"LG204…\n$ RESULT_REMARK  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m \"Quality Control incomplete\", NA, NA, \"Quality Control incom…",
        "\n",
        "> ",
        "unique(df$QC_TYPE)",
        "[1] \"lab duplicate\"           \"field duplicate\"         \"routine field sample\"   \n[4] \"field blank\"             \"Test sample, method\"     NA                       \n[7] \"Control solution, field\"\n",
        "> ",
        "",
        "> ",
        "df %>% ",
        "+ ",
        "  ggplot(aes(x = ANALYTE, group = QC_TYPE, fill = QC_TYPE)) +",
        "+ ",
        "  geom_bar(position = \"fill\")",
        "> ",
        "dim(df)",
        "[1] 333284     26\n",
        "> ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -c(1:18),",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\") %>%",
        "+ ",
        "    drop_na(ANALYTE)",
        "Error: object 'filepath' not found\n",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -c(1:18),",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\") %>%",
        "+ ",
        "    drop_na(ANALYTE)",
        "+ ",
        "}",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [===========---------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [==========================================] \u001B[32m739.15MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                        \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n",
        "> ",
        "dim(df)",
        "[1] 114699     26\n",
        "> ",
        "unique(df$ANALYTE)",
        " [1] \"Alkalinity, Total as CaCO3\"          \"Chlorophyll-a\"                      \n [3] \"Chloride\"                            \"Conductivity\"                       \n [5] \"Nitrogen, Total Oxidized\"            \"Phosphorus, Total as P\"             \n [7] \"pH\"                                  \"Silica, Dissolved as Si\"            \n [9] \"Turbidity\"                           \"Temperature\"                        \n[11] \"Oxygen, Dissolved\"                   \"Carbon, Organic\"                    \n[13] \"Nitrogen, Total, Sediment\"          ",
        " \"Phosphorus, Total as P, Sediment\"   \n[15] \"Sodium\"                              \"Calcium\"                            \n[17] \"Magnesium\"                           \"Nitrogen, Total, Particulate\"       \n[19] \"Suspended solids, total\"             \"Phosphorus, Total as P, Particulate\"\n[21] \"Phosphorus, Orthophosphorus as P\"    \"Hardness, Total as CaCO3\"           \n[23] \"Phosphorus, Base Extractable as P\"   \"Secchi Disc Transparency\"           \n[25] \"Nitrogen, Total\"                     \"Moisture content\"                   ",
        "\n[27] \"Arsenic\"                             \"Potassium\"                          \n[29] \"Manganese\"                           \"Molybdenum\"                         \n[31] \"Selenium\"                            \"Ammonia-Nitrogen\"                   \n[33] \"Silica, Total\"                       \"Phosphorus, Elemental\"              \n[35] \"Silicon, Elemental\"                  \"Ammonium-Nitrogen\"                  \n",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -c(1:18),",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\")",
        "+ ",
        "}",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [============================----------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [============================================] \u001B[32m1.54GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                        \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n",
        "> ",
        "dim(df)",
        "[1] 333284     26\n",
        "> ",
        "unique(df$ANALYTE)",
        " [1] \"Alkalinity, Total as CaCO3\"          \"Chlorophyll-a\"                      \n [3] \"Chloride\"                            \"Conductivity\"                       \n [5] \"Nitrogen, Total Oxidized\"            \"Phosphorus, Total as P\"             \n [7] \"pH\"                                  \"Silica, Dissolved as Si\"            \n [9] \"Turbidity\"                           NA                                   \n[11] \"Temperature\"                         \"Oxygen, Dissolved\"                  \n[13] \"Carbon, Organic\"                    ",
        " \"Nitrogen, Total, Sediment\"          \n[15] \"Phosphorus, Total as P, Sediment\"    \"Sodium\"                             \n[17] \"Calcium\"                             \"Magnesium\"                          \n[19] \"Nitrogen, Total, Particulate\"        \"Suspended solids, total\"            \n[21] \"Phosphorus, Total as P, Particulate\" \"Phosphorus, Orthophosphorus as P\"   \n[23] \"Hardness, Total as CaCO3\"            \"Phosphorus, Base Extractable as P\"  \n[25] \"Secchi Disc Transparency\"            \"Nitrogen, Total\"                    ",
        "\n[27] \"Moisture content\"                    \"Arsenic\"                            \n[29] \"Potassium\"                           \"Manganese\"                          \n[31] \"Molybdenum\"                          \"Selenium\"                           \n[33] \"Ammonia-Nitrogen\"                    \"Silica, Total\"                      \n[35] \"Phosphorus, Elemental\"               \"Silicon, Elemental\"                 \n[37] \"Ammonium-Nitrogen\"                  \n",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -c(1:18),",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\")",
        "+ ",
        "}",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [=============-------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [==========================================] \u001B[32m709.62MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                        \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n",
        "> ",
        "dim(df)",
        "[1] 333284     26\n",
        "> ",
        "unique(df$ANALYTE)",
        " [1] \"Alkalinity, Total as CaCO3\"          \"Chlorophyll-a\"                      \n [3] \"Chloride\"                            \"Conductivity\"                       \n [5] \"Nitrogen, Total Oxidized\"            \"Phosphorus, Total as P\"             \n [7] \"pH\"                                  \"Silica, Dissolved as Si\"            \n [9] \"Turbidity\"                           NA                                   \n[11] \"Temperature\"                         \"Oxygen, Dissolved\"                  \n[13] \"Carbon, Organic\"                    ",
        " \"Nitrogen, Total, Sediment\"          \n[15] \"Phosphorus, Total as P, Sediment\"    \"Sodium\"                             \n[17] \"Calcium\"                             \"Magnesium\"                          \n[19] \"Nitrogen, Total, Particulate\"        \"Suspended solids, total\"            \n[21] \"Phosphorus, Total as P, Particulate\" \"Phosphorus, Orthophosphorus as P\"   \n[23] \"Hardness, Total as CaCO3\"            \"Phosphorus, Base Extractable as P\"  \n[25] \"Secchi Disc Transparency\"            \"Nitrogen, Total\"                    ",
        "\n[27] \"Moisture content\"                    \"Arsenic\"                            \n[29] \"Potassium\"                           \"Manganese\"                          \n[31] \"Molybdenum\"                          \"Selenium\"                           \n[33] \"Ammonia-Nitrogen\"                    \"Silica, Total\"                      \n[35] \"Phosphorus, Elemental\"               \"Silicon, Elemental\"                 \n[37] \"Ammonium-Nitrogen\"                  \n",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -c(1:18),",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\")a %>%",
        "Error: unexpected symbol in:\n\"                 names_to = c(\".value\", \"Number\"),\n                 names_pattern = \"(.*)_(\\\\d*)$\")a\"\n",
        "> ",
        "readPivotGLENDA <- function(filepath) {",
        "+ ",
        "  read_csv(filepath,",
        "+ ",
        "           col_types = cols(YEAR = \"i\",",
        "+ ",
        "                            STN_DEPTH_M = \"d\",",
        "+ ",
        "                            LATITUDE = \"d\",",
        "+ ",
        "                            LONGITUDE = \"d\",",
        "+ ",
        "                            SAMPLING_DATE = col_date(format = \"%Y/%m/%d %H:%M\"),",
        "+ ",
        "                            SAMPLE_DEPTH_M = \"d\",",
        "+ ",
        "                            # Skip useless or redundant columns",
        "+ ",
        "                            Row = \"-\",",
        "+ ",
        "                            .default = \"c\")) %>%",
        "+ ",
        "    pivot_longer(cols = -c(1:18),",
        "+ ",
        "                 names_to = c(\".value\", \"Number\"),",
        "+ ",
        "                 names_pattern = \"(.*)_(\\\\d*)$\") %>%",
        "+ ",
        "    drop_na(ANALYTE)",
        "+ ",
        "}",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [==================--------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [==========================================] \u001B[32m701.74MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                        \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n",
        "> ",
        "dim(df)",
        "[1] 114699     26\n",
        "> ",
        "unique(df$ANALYTE)",
        " [1] \"Alkalinity, Total as CaCO3\"          \"Chlorophyll-a\"                      \n [3] \"Chloride\"                            \"Conductivity\"                       \n [5] \"Nitrogen, Total Oxidized\"            \"Phosphorus, Total as P\"             \n [7] \"pH\"                                  \"Silica, Dissolved as Si\"            \n [9] \"Turbidity\"                           \"Temperature\"                        \n[11] \"Oxygen, Dissolved\"                   \"Carbon, Organic\"                    \n[13] \"Nitrogen, Total, Sediment\"          ",
        " \"Phosphorus, Total as P, Sediment\"   \n[15] \"Sodium\"                              \"Calcium\"                            \n[17] \"Magnesium\"                           \"Nitrogen, Total, Particulate\"       \n[19] \"Suspended solids, total\"             \"Phosphorus, Total as P, Particulate\"\n[21] \"Phosphorus, Orthophosphorus as P\"    \"Hardness, Total as CaCO3\"           \n[23] \"Phosphorus, Base Extractable as P\"   \"Secchi Disc Transparency\"           \n[25] \"Nitrogen, Total\"                     \"Moisture content\"                   ",
        "\n[27] \"Arsenic\"                             \"Potassium\"                          \n[29] \"Manganese\"                           \"Molybdenum\"                         \n[31] \"Selenium\"                            \"Ammonia-Nitrogen\"                   \n[33] \"Silica, Total\"                       \"Phosphorus, Elemental\"              \n[35] \"Silicon, Elemental\"                  \"Ammonium-Nitrogen\"                  \n",
        "> ",
        "source(\"Code/dataCleaning/readCleanGLENDA.R\")",
        "> ",
        "df <- readPivotGLENDA(\"Data/Raw/GLENDA.csv\")",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [=============-------------------------------] \u001B[32m2.15GB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mGLENDA.csv\u001B[0m [==========================================] \u001B[32m841.70MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                        \r\u001B[38;5;255mNew names:\n\u001B[36m•\u001B[38;5;255m `` -> `...209`\u001B[39m\n\nRestarting R session...\n\n"
    ]
}